{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "js/logger.js",
    "node_modules/clownface/index.js",
    "node_modules/mustache/mustache.js",
    "js/rdf2h-core.js"
  ],
  "names": [],
  "mappings": "AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChrn
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "/* global module */\n\nfunction Logger() {\n    //get from localStorage\n    this.level = Logger.INFO;\n}\n\nLogger.TRACE = 1;\nLogger.DEBUG = 2;\nLogger.INFO = 3;\nLogger.WARN = 4;\nLogger.ERROR = 5;\n\nLogger.prototype.setLevel = function(level) {\n    this.level = level;\n};\n\nLogger.prototype.trace = function(message) {\n    if (this.level <= Logger.TRACE) {\n        var args = arguments;\n        args[0] = \"[TRACE] \"+message;\n        console.log.apply(console, args);\n    }\n};\n\nLogger.prototype.debug = function(message) {\n    if (this.level <= Logger.DEBUG) {\n        var args = arguments;\n        args[0] = \"[DEBUG] \"+message;\n        console.log.apply(console, args);\n    }\n};\n\nLogger.prototype.info = function(message) {\n    if (this.level <= Logger.INFO) {\n        var args = arguments;\n        args[0] = \"[INFO] \"+message;\n        console.log.apply(console, args);\n    }\n};\n\nLogger.prototype.warn = function(message) {\n    if (this.level <= Logger.WARN) {\n        var args = arguments;\n        args[0] = \"[WARN] \"+message;\n        console.log.apply(console, args);\n    }\n};\n\nLogger.prototype.error = function(message) {\n    if (this.level <= Logger.ERROR) {\n        var args = arguments;\n        args[0] = \"[ERROR] \"+message;\n        console.log.apply(console, args);\n    }\n};\n\n\nif (typeof module !== 'undefined') {\n    module.exports = Logger;\n}\nif (typeof window !== 'undefined') {\n    window.Logger = Logger;\n}\n",
    "var rdf = require('rdf-ext')\n\nvar clownface = {}\n\nclownface.options = {\n  detectNamedNodes: true,\n  namedNodeRegEx: /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/\n}\n\nfunction node (value) {\n  if (!value) {\n    return undefined\n  }\n\n  if (Array.isArray(value)) {\n    return value.map(function (item) {\n      return node(item)\n    })\n  }\n\n  if (typeof value === 'object' && value.interfaceName) {\n    return value\n  }\n\n  if (typeof value === 'string') {\n    if (clownface.options.detectNamedNodes && clownface.options.namedNodeRegEx.test(value)) {\n      return rdf.createNamedNode(value)\n    } else {\n      return rdf.createLiteral(value)\n    }\n  } else if (typeof value === 'number') {\n    return rdf.createLiteral(value + '')\n  } else {\n    throw new Error('unknown type')\n  }\n}\n\nfunction nodeGraph (value, graph, graphIri) {\n  if (Array.isArray(value)) {\n    return value.map(function (item) {\n      return nodeGraph(item, graph, graphIri)\n    })\n  }\n\n  value = node(value)\n  value.graph = graph\n  value.graphIri = graphIri\n\n  return value\n}\n\nfunction inArray (node, array) {\n  return array.some(function (otherNode) {\n    return otherNode.equals(node)\n  })\n}\n\nfunction toArray (value) {\n  if (!value) {\n    return undefined\n  }\n\n  if (!Array.isArray(value)) {\n    return [value]\n  }\n\n  return value\n}\n\nclownface.Graph = function (graph, nodes) {\n  if (!(this instanceof clownface.Graph)) {\n    return new clownface.Graph(graph, nodes)\n  }\n\n  this.context = node(toArray(nodes))\n\n  var match = function (subject, predicate, object, property) {\n    if (!graph) {\n      return null\n    }\n\n    var matches = []\n\n    predicate = node(toArray(predicate))\n\n    graph.forEach(function (triple) {\n      if (subject !== null && !inArray(triple.subject, subject)) {\n        return\n      }\n\n      if (predicate !== null && !inArray(triple.predicate, predicate)) {\n        return\n      }\n\n      if (object !== null && !inArray(triple.object, object)) {\n        return\n      }\n\n      matches.push(triple[property])\n    })\n\n    return matches\n  }\n\n  this.graph = function () {\n    return graph\n  }\n\n  this.node = function (value) {\n    return clownface.Graph(graph, value)\n  }\n\n  this.in = function (predicate) {\n    return clownface.Graph(graph, match(null, predicate, this.context, 'subject'))\n  }\n\n  this.out = function (predicate) {\n    return clownface.Graph(graph, match(this.context, predicate, null, 'object'))\n  }\n\n  this.nodes = function () {\n    if (!this.context) {\n      return []\n    }\n\n    return this.context\n  }\n\n  this.literal = function () {\n    if (!this.context) {\n      return undefined\n    }\n\n    return this.context\n      .map(function (node) {\n        return node.nominalValue\n      })\n  }\n\n  this.removeIn = function (predicate) {\n    if (predicate) {\n      predicate = node(toArray(predicate))\n    }\n\n    this.nodes().forEach(function (o) {\n      if (predicate) {\n        predicate.forEach(function (p) {\n          graph.removeMatches(null, p, o)\n        })\n      } else {\n        graph.removeMatches(null, null, o)\n      }\n    })\n\n    return this\n  }\n\n  this.removeOut = function (predicate) {\n    if (predicate) {\n      predicate = node(toArray(predicate))\n    }\n\n    this.nodes().forEach(function (s) {\n      if (predicate) {\n        predicate.forEach(function (p) {\n          graph.removeMatches(s, p, null)\n        })\n      } else {\n        graph.removeMatches(s, null, null)\n      }\n    })\n\n    return this\n  }\n\n  this.toArray = function () {\n    return this.nodes().map(this.node)\n  }\n\n  this.filter = function (callback) {\n    return clownface.Graph(graph, this.toArray().filter(callback).map(function (cf) {\n      return cf.context.shift()\n    }))\n  }\n\n  this.forEach = function (callback) {\n    return this.toArray().forEach(callback)\n  }\n\n  this.map = function (callback) {\n    return this.toArray().map(callback)\n  }\n\n  this.toString = function () {\n    return this.literal().join()\n  }\n}\n\nclownface.Store = function (store, nodes) {\n  if (!(this instanceof clownface.Store)) {\n    return new clownface.Store(store, nodes)\n  }\n\n  this.context = toArray(nodes)\n\n  this.store = function () {\n    return store\n  }\n\n  this.graphs = function () {\n    var unique = []\n\n    this.nodes().forEach(function (item) {\n      if (unique.indexOf(item.graph) === -1) {\n        unique.push(item.graph)\n      }\n    })\n\n    return unique\n  }\n\n  this.node = function (value, graphIri, then) {\n    var graphIris = toArray(graphIri || value.graphIri || value)\n\n    return Promise.all(graphIris.map(function (graphIri) {\n      return store.graph(graphIri)\n    })).then(function (graphs) {\n      var nodes = []\n\n      graphs.forEach(function (graph, index) {\n        nodes = nodes.concat(nodeGraph(value, graph, graphIris[index]))\n      })\n\n      if (then) {\n        return Promise.resolve(then(clownface.Store(store, nodes)))\n      } else {\n        return clownface.Store(store, nodes)\n      }\n    })\n  }\n\n  this.in = function (predicate) {\n    var matches = []\n\n    this.nodes().forEach(function (item) {\n      matches = matches.concat(clownface.Graph(item.graph, item).in(predicate).nodes().map(function (match) {\n        return nodeGraph(match, item.graph, item.graphIri)\n      }))\n    })\n\n    return clownface.Store(store, matches)\n  }\n\n  this.out = function (predicate) {\n    var matches = []\n\n    this.nodes().forEach(function (item) {\n      matches = matches.concat(clownface.Graph(item.graph, item).out(predicate).nodes().map(function (match) {\n        return nodeGraph(match, item.graph, item.graphIri)\n      }))\n    })\n\n    return clownface.Store(store, matches)\n  }\n\n  this.jump = function (then) {\n    return Promise.all(this.nodes().map(function (item) {\n      return store.graph(item.nominalValue).then(function (graph) {\n        return nodeGraph(item, graph, item.nominalValue)\n      })\n    })).then(function (entries) {\n      if (then) {\n        return Promise.resolve(then(clownface.Store(store, entries)))\n      } else {\n        return clownface.Store(store, entries)\n      }\n    })\n  }\n\n  this.nodes = function () {\n    if (!this.context) {\n      return []\n    }\n\n    return this.context\n  }\n\n  this.literal = function () {\n    if (!this.context) {\n      return undefined\n    }\n\n    return this.context\n      .map(function (node) {\n        return node.nominalValue\n      })\n  }\n\n  this.toArray = function () {\n    return this.nodes().map(function (node) {\n      return clownface.Store(store, node)\n    })\n  }\n\n  this.forEach = function (callback) {\n    return this.toArray().forEach(callback)\n  }\n\n  this.map = function (callback) {\n    return this.toArray().map(callback)\n  }\n\n  this.toString = function () {\n    return this.literal().join()\n  }\n}\n\nmodule.exports = clownface\n",
    "/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */\n\n/*global define: false Mustache: true*/\n\n(function defineMustache (global, factory) {\n  if (typeof exports === 'object' && exports && typeof exports.nodeName !== 'string') {\n    factory(exports); // CommonJS\n  } else if (typeof define === 'function' && define.amd) {\n    define(['exports'], factory); // AMD\n  } else {\n    global.Mustache = {};\n    factory(global.Mustache); // script, wsh, asp\n  }\n}(this, function mustacheFactory (mustache) {\n\n  var objectToString = Object.prototype.toString;\n  var isArray = Array.isArray || function isArrayPolyfill (object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n\n  function isFunction (object) {\n    return typeof object === 'function';\n  }\n\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n  function typeStr (obj) {\n    return isArray(obj) ? 'array' : typeof obj;\n  }\n\n  function escapeRegExp (string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n  function hasProperty (obj, propName) {\n    return obj != null && typeof obj === 'object' && (propName in obj);\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var regExpTest = RegExp.prototype.test;\n  function testRegExp (re, string) {\n    return regExpTest.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace (string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  function escapeHtml (string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   */\n  function parseTemplate (template, tags) {\n    if (!template)\n      return [];\n\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace () {\n      if (hasTag && !nonSpace) {\n        while (spaces.length)\n          delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags (tagsToCompile) {\n      if (typeof tagsToCompile === 'string')\n        tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n        throw new Error('Invalid tags: ' + tagsToCompile);\n\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n          } else {\n            nonSpace = true;\n          }\n\n          tokens.push([ 'text', chr, start, start + 1 ]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n')\n            stripSpace();\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe))\n        break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe))\n        throw new Error('Unclosed tag at ' + scanner.pos);\n\n      token = [ type, value, start, scanner.pos ];\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection)\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value)\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection)\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens (tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens (tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n        default:\n          collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner (string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function eos () {\n    return this.tail === '';\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function scan (re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0)\n      return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function scanUntil (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n      case 0:\n        match = '';\n        break;\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context (view, parentContext) {\n    this.view = view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function push (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function lookup (name) {\n    var cache = this.cache;\n\n    var value;\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this, names, index, lookupHit = false;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          value = context.view;\n          names = name.split('.');\n          index = 0;\n\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           **/\n          while (value != null && index < names.length) {\n            if (index === names.length - 1)\n              lookupHit = hasProperty(value, names[index]);\n\n            value = value[names[index++]];\n          }\n        } else {\n          value = context.view[name];\n          lookupHit = hasProperty(context.view, name);\n        }\n\n        if (lookupHit)\n          break;\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value))\n      value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer () {\n    this.cache = {};\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function clearCache () {\n    this.cache = {};\n  };\n\n  /**\n   * Parses and caches the given `template` and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function parse (template, tags) {\n    var cache = this.cache;\n    var tokens = cache[template];\n\n    if (tokens == null)\n      tokens = cache[template] = parseTemplate(template, tags);\n\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   */\n  Writer.prototype.render = function render (template, view, partials) {\n    var tokens = this.parse(template);\n    var context = (view instanceof Context) ? view : new Context(view);\n    return this.renderTokens(tokens, context, partials, template);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);\n      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);\n      else if (symbol === '>') value = this.renderPartial(token, context, partials, originalTemplate);\n      else if (symbol === '&') value = this.unescapedValue(token, context);\n      else if (symbol === 'name') value = this.escapedValue(token, context);\n      else if (symbol === 'text') value = this.rawValue(token);\n\n      if (value !== undefined)\n        buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender (template) {\n      return self.render(template, context, partials);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string')\n        throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null)\n        buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n    }\n    return buffer;\n  };\n\n  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || (isArray(value) && value.length === 0))\n      return this.renderTokens(token[4], context, partials, originalTemplate);\n  };\n\n  Writer.prototype.renderPartial = function renderPartial (token, context, partials) {\n    if (!partials) return;\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null)\n      return this.renderTokens(this.parse(value), context, partials, value);\n  };\n\n  Writer.prototype.unescapedValue = function unescapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return value;\n  };\n\n  Writer.prototype.escapedValue = function escapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return mustache.escape(value);\n  };\n\n  Writer.prototype.rawValue = function rawValue (token) {\n    return token[1];\n  };\n\n  mustache.name = 'mustache.js';\n  mustache.version = '2.2.1';\n  mustache.tags = [ '{{', '}}' ];\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function clearCache () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function parse (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view` and `partials` using the\n   * default writer.\n   */\n  mustache.render = function render (template, view, partials) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                          'but \"' + typeStr(template) + '\" was given as the first ' +\n                          'argument for mustache#render(template, view, partials)');\n    }\n\n    return defaultWriter.render(template, view, partials);\n  };\n\n  // This is here for backwards compatibility with 0.4.x.,\n  /*eslint-disable */ // eslint wants camel cased function name\n  mustache.to_html = function to_html (template, view, partials, send) {\n    /*eslint-enable*/\n\n    var result = mustache.render(template, view, partials);\n\n    if (isFunction(send)) {\n      send(result);\n    } else {\n      return result;\n    }\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n}));\n",
    "/* global rdf, Mustache */\n\n\nvar rdf = require(\"rdf-ext\");\nvar clownface = require(\"clownface\");\nvar Mustache = require(\"mustache\");\nvar Logger = require(\"./logger.js\");\n\nrdf.setPrefix(\"r2h\", \"http://rdf2h.github.io/2015/rdf2h#\");\n\nfunction RDF2h(matcherGraph) {\n    RDF2h.logger.info(\"To see more debug output invoke RDF2h.logger.setLevel(Logger.DEBUG) or even RDF2h.logger.setLevel(Logger.TRACE)\");\n    this.matcherGraph = matcherGraph;\n    //use cf.in on r2h:Matcher create array of matchers\n    var cf = clownface.Graph(matcherGraph);\n    var matcherType = cf.node(\"http://rdf2h.github.io/2015/rdf2h#Matcher\");\n    var unorderedMatchers = matcherType.in(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\").nodes();\n    this.matchers = [];\n    var self = this;\n    function getLaterNodes(cfn) {\n        var laterNodes = cfn.out(\"http://rdf2h.github.io/2015/rdf2h#before\").nodes();\n        for (var i = 0; i < laterNodes.length; i++) {\n            var laterNode = cf.node(laterNodes[i]);\n            var transitives = getLaterNodes(laterNode);\n            for (var j = 0; j < transitives.length; j++) {\n                var transitive = transitives[j];\n                if (!laterNodes.some(function (e) {\n                    return (transitive.equals(e));\n                })) {\n                    laterNodes.push(transitive);\n                }\n            }\n        }\n        return laterNodes;\n    }\n    while (unorderedMatchers.length > 0) {\n        var matcherToPlace = unorderedMatchers.pop();\n        var laterNodes = getLaterNodes(cf.node(matcherToPlace));\n        function getInsertPosition() {\n            for (var i = 0; i < self.matchers.length; i++) {\n                if (laterNodes.some(function (e) {\n                    return (self.matchers[i].equals(e))\n                })) {\n                    return i;\n                }\n            }\n            return self.matchers.length;\n        }\n        this.matchers.splice(getInsertPosition(), 0, matcherToPlace);\n    }\n    RDF2h.logger.debug(\"Constructed RDF2h with the following matchers: \", this.matchers);\n}\n\nRDF2h.logger = new Logger();\n\n(function () {\n    var origLokup = Mustache.Context.prototype.lookup;\n    Mustache.Context.prototype.lookup = function (name) {\n        if (this.view instanceof RDF2h.Renderee) {\n            var rdf2h = this.view.rdf2h;\n            var graphNode = this.view.graphNode;\n            var graph = this.view.graph;\n            var context = this.view.context;\n            var currentMatcherIndex = this.view.currentMatcherIndex;\n            function resolvePath(path) {\n                function resolveSubPath(node, pathSections) {\n                    function resolveSection(section) {\n                        if (section === \".\") {\n                            return node;\n                        } else {\n                            if (section.endsWith(\"<-\")) {\n                                return node.in(RDF2h.resolveCurie(section.substring(0, section.length - 2)));\n                            } else {\n                                return node.out(RDF2h.resolveCurie(section));\n                            }\n                        }\n                    }\n                    subNode = resolveSection(pathSections[0]);\n                    if (pathSections.length === 1) {\n                        var resultNodes = subNode.nodes();\n                        if (resultNodes.length === 0) {\n                            //handling pseudo properties of literals\n                            if (node.nodes()[0].language) {\n                                if (RDF2h.resolveCurie(pathSections[0]) === \"http://purl.org/dc/terms/language\") {\n                                    return [rdf.createLiteral(node.nodes()[0].language)];\n                                }\n                            }\n                            if (node.nodes()[0].datatype) {\n                                if (RDF2h.resolveCurie(pathSections[0]) === RDF2h.resolveCurie(\"rdf:type\")) {\n                                    return [node.nodes()[0].datatype];\n                                }\n                            }\n                        }\n                        return resultNodes;\n                    }\n                    return resolveSubPath(subNode,pathSections.slice(1))    \n                }\n                var pathSections = path.split(\"/\").filter(function(e) { return e.length > 0})\n                return resolveSubPath(graphNode, pathSections);\n            }\n            if (name.startsWith(\"@prefix \")) {\n                var splits = name.split(\" \");\n                var prefixPart = splits[1];\n                var iriPart = splits[2];\n                var prefix = prefixPart.substring(0, prefixPart.length -1);\n                var iri = iriPart.substring(1, iriPart.length -1);\n                RDF2h.prefixMap[prefix] = iri;\n                return \"\";\n            }\n            if (name.startsWith(\":render \")) {\n                var splits = name.split(\" \");\n                var nodePath = splits[1];\n                var subContext = splits[2];\n                if (subContext) {\n                    subContext = RDF2h.resolveCurie(subContext);\n                }\n                if (!subContext) {\n                    subContext = context;\n                }\n                var resolvedNodes = resolvePath(nodePath);\n                if (resolvedNodes.length > 1) {\n                    RDF2h.logger.warn(\"Argument of render evaluates to more than one node!\")\n                }\n                if (resolvedNodes.length > 0) {\n                    return rdf2h.render(graph, resolvedNodes[0], subContext)\n                } else {\n                    return \"\";\n                }\n            }\n            if (name.startsWith(\":continue\")) {\n                var splits = name.split(\" \");\n                var subContext = splits[1];\n                if (subContext) {\n                    subContext = RDF2h.resolveCurie(subContext);\n                }\n                if (!subContext) {\n                    subContext = context;\n                }\n                if (graphNode.nodes().length > 1) {\n                    RDF2h.logger.warn(\":continue invoked in context with more than one node, this shouldn't be possible!\")\n                }\n                return rdf2h.render(graph, graphNode.nodes()[0], subContext, currentMatcherIndex + 1);\n\n            }\n            if (name.startsWith(\"+\")) {\n                name = name.substring(1);\n                return (resolvePath(name).length > 0);\n            }\n            var nodes = resolvePath(name);\n            if (nodes.length === 1) {\n                return new RDF2h.Renderee(rdf2h, graph, nodes[0], context);\n            } else {\n                return nodes.map(function (node) {\n                    return new RDF2h.Renderee(rdf2h, graph, node, context);\n                });\n            }\n            /*var node = this.view;\n             if (name === \".\") {\n             return node;\n             } else {\n             return \"not supported: \"+name;\n             }*/\n        } else {\n            return origLokup.call(this, name);\n        }\n    };\n})();\n\n\nRDF2h.Renderee = function (rdf2h, graph, node, context) {\n    if (!node) {\n        throw \"no node specficied!\";\n    }\n    if (Object.prototype.toString.call(node) === '[object Array]') {\n        throw \"Renderee must be a single node\";\n    }\n    this.rdf2h = rdf2h;\n    this.graph = graph;\n    this.node = node;\n    this.context = context;\n    var cf = clownface.Graph(graph);\n    this.graphNode = cf.node(node);\n};\n\nRDF2h.Renderee.prototype.toString = function () {\n    if (this.node.nominalValue) {\n        return this.node.nominalValue;\n    }\n    return this.node.toString();\n}\n\nRDF2h.prototype.getRenderer = function (renderee) {\n    var cf = clownface.Graph(this.matcherGraph);\n\n    function matchPattern(cfTriplePattern) {\n        function isThis(node) {\n            return (node && (node.interfaceName === \"NamedNode\") &&\n                    (node.toString() === \"http://rdf2h.github.io/2015/rdf2h#this\"));\n        }\n        var s = cfTriplePattern.out(\"http://rdf2h.github.io/2015/rdf2h#subject\").nodes()[0];\n        var p = cfTriplePattern.out(\"http://rdf2h.github.io/2015/rdf2h#predicate\").nodes()[0];\n        var o = cfTriplePattern.out(\"http://rdf2h.github.io/2015/rdf2h#object\").nodes()[0];\n        if (isThis(s)) {\n            return renderee.graphNode.out(p).nodes().some(function (e) {\n                return (!o || o.equals(e))\n            });\n        } else if (isThis(o)) {\n            return renderee.graphNode.in(p).nodes().some(function (e) {\n                return (!s || s.equals(e))\n            });\n        } else {\n            console.error(\"Triple pattern must have r2h:this as subject or object\");\n        }\n    }\n    function matchesContext(cfTemplate) {\n        var contexts = cfTemplate.out(\"http://rdf2h.github.io/2015/rdf2h#context\").nodes();\n        if (contexts.length === 0) {\n            RDF2h.logger.trace(\"template \"+cfTemplate+\" specifies no context, thus accepting it for \"+renderee.context);\n            return true;\n        }\n        return contexts.some(function(context) {\n            if (renderee.context == context) {\n                RDF2h.logger.trace(\"template \"+cfTemplate+\" matches the context \"+renderee.context);\n                return true;\n            }\n        });\n    }\n    function matches(cfMatcher) {\n        var triplePatterns = cfMatcher.out(\"http://rdf2h.github.io/2015/rdf2h#triplePattern\").nodes();\n        for (var i = 0; i < triplePatterns.length; i++) {\n            var cfTp = cf.node(triplePatterns[i]);\n            if (!matchPattern(cfTp)) {\n                RDF2h.logger.debug(\"Matcher \"+cfMatcher+\" doesn't has tripple patterns matching \"+renderee.graphNode);\n                return false;\n            }\n        }\n        return true;\n    }\n    function resolveTemplateNode(templateURI) {\n        if (!window) {\n            return \"Could not get template: \" + templateURI + \", no window object.\"\n        }\n        var pageURIPrefix = window.location + \"#\";\n        if (!templateURI.startsWith(pageURIPrefix)) {\n            return \"Could not get template: \" + templateURI + \", the prefix must be \" + pageURIPrefix + \".\"\n        }\n        var id = templateURI.substring(pageURIPrefix.length);\n        return document.getElementById(id).textContent;\n    }\n    function templateRenderer(template) {\n        return function (renderee) {\n            return Mustache.render(template, renderee);\n        };\n    }\n    for (var i = this.startMatcherIndex; i < this.matchers.length; i++) {\n        var matcher = this.matchers[i];\n        var cfMatcher = cf.node(matcher);\n        if (matches(cfMatcher)) {\n            renderee.currentMatcherIndex = i;\n            //r2h:template seems not to work here\n            var templateNodes = cfMatcher.out(\"http://rdf2h.github.io/2015/rdf2h#template\").nodes();\n            for (var j = 0; j < templateNodes.length; j++) {\n                var templateNode = templateNodes[j];\n                var cfTemplate = cf.node(templateNode);\n                if (!matchesContext(cfTemplate)) {\n                    continue;\n                }\n                var jsNode = cfTemplate.\n                        out(\"http://rdf2h.github.io/2015/rdf2h#javaScript\").\n                        nodes()[0];\n                if (jsNode) {\n                    return eval(\"var f = \"+jsNode.nominalValue+\"; f;\");\n                }\n                var mustacheNode = cfTemplate.\n                        out(\"http://rdf2h.github.io/2015/rdf2h#mustache\").\n                        nodes()[0];\n                if (mustacheNode.interfaceName === \"NamedNode\") {\n                    return templateRenderer(resolveTemplateNode(mustacheNode.nominalValue));\n                }\n                return templateRenderer(mustacheNode.nominalValue);\n            }\n            RDF2h.logger.debug(\"Matcher \"+cfMatcher+\" has not template with matching context\");\n        }\n    }\n    if (this.startMatcherIndex === 0) {\n        return templateRenderer('<div class=\"missingTemplate\">No template found for &lt;{{.}}&gt;</div>');\n    } else {\n        return templateRenderer('<div class=\"noMoreTemplate\">No more template available for &lt;{{.}}&gt;</div>');\n    }\n\n}\n\nRDF2h.prototype.render = function (graph, node, context, startMatcherIndex) {\n    if (!context) {\n        context = RDF2h.resolveCurie(\"r2h:Default\");\n    }\n    //wrap all in one object that gets special care by lookup\n    var renderee = new RDF2h.Renderee(this, graph, node, context);\n    if (!startMatcherIndex) {\n        this.startMatcherIndex = 0;\n    } else {\n        this.startMatcherIndex = startMatcherIndex;\n    }\n    var renderer = this.getRenderer(renderee);\n    return renderer(renderee);\n}\n\nRDF2h.prefixMap = rdf.prefixes;\nRDF2h.prefixMap[\"s\"] = \"http://schema.org/\";\n/*rdf.prefixes.addAll({\n    \"s\": \"http://schema.org/\"\n});*/\n\nRDF2h.resolveCurie = function (curie) {\n    RDF2h.logger.debug(\"resolving \" + curie);\n    var splits = curie.split(\":\");\n    var prefix = splits[0];\n    var suffix = splits[1];\n    if (RDF2h.prefixMap[prefix]) {\n        return RDF2h.prefixMap[prefix] + suffix;\n    } else {\n        return curie;\n    }\n\n};\n\nif (typeof window !== 'undefined') {\n    window.RDF2h = RDF2h;\n}\n\nif (typeof module !== 'undefined') {\n    module.exports = RDF2h;\n}\n"
  ]
}