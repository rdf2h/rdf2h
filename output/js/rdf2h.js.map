{"version":3,"sources":["webpack:///js/rdf2h.js","webpack:///webpack/bootstrap 5094c47fc10908460e2e","webpack:///external \"$rdf\"","webpack:///./src/rdf2h.js","webpack:///./node_modules/rdfgraphnode/distribution/main.js","webpack:///./node_modules/mustache/mustache.js","webpack:///./src/vocab.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","$rdf","RDF2h","matcherGraph","tbox","r2h","suffix","rdf","sym","console","info","this","env","unorderedMatchers","Array","rdfTypeProperty","matcherType","statementsMatching","forEach","t","push","subject","beforeProperty","beforeStatements","sortedMatchers","self","length","some","current","filter","equals","error","toString","debug","map","GraphNode","Mustache","vocab","origLokup","rdf2h","Context","lookup","view","Renderee","resolvePath","path","resolveSubPath","node","pathSections","subNode","section","endsWith","in","resolveCurie","substring","startsWith","out","resultNodes","nodes","language","literal","datatype","slice","string","nextSection","result","readingURI","lastCharLess","pos","graphNode","graph","context","currentMatcherIndex","splits","split","prefixPart","iriPart","prefix","iri","prefixMap","nodePath","subContext","resolvedNodes","warn","render","Error","value","getRenderer","renderee","_this","types","sort","a","b","rdfs","match","localeCompare","concat","renderer","getMatching","renderers","find","reduce","type","join","mustache","js","Function","err","message","stackLines","stack","lineWithSelf","findIndex","indexOf","splice","startMatcherIndex","termType","curie","window","_classCallCheck","instance","Constructor","TypeError","bind","apply","Impl","arguments","_createClass","defineProperties","target","props","descriptor","writable","key","protoProps","staticProps","_class","sources","_graph","isArray","Promise","resolve","uri","rdfFetch","then","response","f","_this2","results","all","_this3","fetch","_this4","predicate","each","undefined","statement","options","login","ggg","reject","Fetcher","redirect","status","log","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","_typeof","Symbol","iterator","obj","constructor","global","factory","nodeName","isFunction","typeStr","escapeRegExp","replace","hasProperty","propName","testRegExp","re","regExpTest","isWhitespace","nonSpaceRe","escapeHtml","String","entityMap","parseTemplate","template","tags","compileTags","tagsToCompile","spaceRe","openingTagRe","RegExp","closingTagRe","closingCurlyRe","sections","tokens","spaces","hasTag","nonSpace","start","chr","token","openSection","scanner","Scanner","eos","scanUntil","valueLength","charAt","pop","scan","tagRe","whiteRe","equalsRe","curlyRe","nestTokens","squashTokens","lastToken","squashedTokens","numTokens","nestedTokens","collector","tail","parentContext","cache",".","parent","Writer","objectToString","test","&","<",">","\"","'","/","`","=","index","search","names","lookupHit","clearCache","parse","partials","renderTokens","originalTemplate","symbol","buffer","renderSection","renderInverted","renderPartial","unescapedValue","escapedValue","rawValue","subRender","j","escape","version","defaultWriter","to_html","send","schema","foaf"],"mappings":"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","file":"js/rdf2h.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = $rdf;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar rdf = __webpack_require__(0);\nvar GraphNode = __webpack_require__(2);\nvar Mustache = __webpack_require__(3);\nvar vocab = __webpack_require__(4);\nvar NodeSet = new Array();\n\nfunction RDF2h(matcherGraph, tbox) {\n    function r2h(suffix) {\n        return rdf.sym(\"http://rdf2h.github.io/2015/rdf2h#\" + suffix);\n    }\n    console.info(\"RDF2h created\");\n    this.matcherGraph = matcherGraph;\n    if (tbox) {\n        this.tbox = tbox;\n    } else {\n        this.tbox = matcherGraph;\n    }\n    this.env = {}; //this is to allow shared vars among renderers\n    var unorderedMatchers = new Array(); //new NodeSet();\n    var rdfTypeProperty = rdf.sym(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\");\n    var matcherType = r2h(\"Matcher\");\n    var matcherStatements = matcherGraph.statementsMatching(null, rdfTypeProperty, matcherType);\n    matcherStatements.forEach(function (t) {\n        unorderedMatchers.push(t.subject);\n    });\n    /*Sorting:\n     * \n     * Choose any matcher that is not the object of any before statement . \n     * Remove all before statements with that matcher as subject. \n     * Repeat till there are no more matchers that are not the object of a \n     * before statement. \n     * If there are matchers left the before statements are circular.\n     */\n    var beforeProperty = r2h(\"before\");\n    var beforeStatements = matcherGraph.statementsMatching(null, beforeProperty);\n    beforeStatements.forEach(function (t) {\n        unorderedMatchers.push(t.subject);\n        unorderedMatchers.push(t.object);\n    });\n    this.sortedMatchers = [];\n    var self = this;\n    while (unorderedMatchers.length > 0) {\n        if (!unorderedMatchers.some(function (current) {\n            //TODO if (beforeStatements.match(null, beforeProperty, current).length === 0) {\n            if (true) {\n                self.sortedMatchers.push(current);\n                unorderedMatchers = unorderedMatchers.filter(function (n) {\n                    return !n.equals(current);\n                });\n                //FIXME beforeStatements.removeMatches(current, beforeProperty);\n                return true; //stop iteration over unorderedMatchers\n            } else {\n                return false;\n            }\n        })) {\n            console.error(\"Circle Detected with:\\n\" + beforeStatements.toString());\n            break;\n        }\n    }\n    console.debug(\"Constructed RDF2h with the following matchers: \", this.sortedMatchers.map(function (m) {\n        return m.toString();\n    }));\n}\n\n(function () {\n    var r2h = vocab.rdf2h;\n    var origLokup = Mustache.Context.prototype.lookup;\n    Mustache.Context.prototype.lookup = function (name) {\n        if (this.view instanceof RDF2h.Renderee) {\n            var resolvePath = function resolvePath(path) {\n                function resolveSubPath(node, pathSections) {\n                    function resolveSection(section) {\n                        if (section === \".\") {\n                            return node;\n                        } else {\n                            if (section.endsWith(\"<-\")) {\n                                return node.in(RDF2h.resolveCurie(section.substring(0, section.length - 2)));\n                            } else {\n                                if (section.startsWith(\"^\")) {\n                                    return node.in(RDF2h.resolveCurie(section.substring(1)));\n                                } else {\n                                    return node.out(RDF2h.resolveCurie(section));\n                                }\n                            }\n                        }\n                    }\n                    var subNode = resolveSection(pathSections[0]);\n                    if (pathSections.length === 1) {\n                        var resultNodes = subNode.nodes;\n                        if (resultNodes.length === 0) {\n                            //handling pseudo properties of literals\n                            if (node.nodes[0].language) {\n                                if (RDF2h.resolveCurie(pathSections[0]).equals(rdf.sym(\"http://purl.org/dc/terms/language\"))) {\n                                    return [rdf.literal(node.nodes[0].language)];\n                                }\n                            }\n                            if (node.nodes[0].datatype) {\n                                if (RDF2h.resolveCurie(pathSections[0]).equals(RDF2h.resolveCurie(\"rdf:type\"))) {\n                                    return [node.nodes[0].datatype];\n                                }\n                            }\n                        }\n                        return resultNodes;\n                    }\n                    return resolveSubPath(subNode, pathSections.slice(1));\n                }\n                function splitPathSection(string) {\n                    var result = [];\n                    var readingURI = false;\n                    var lastCharLess = false;\n                    var section = \"\";\n                    function nextSection() {\n                        if (section.length > 0) {\n                            result.push(section);\n                            section = \"\";\n                        }\n                    }\n                    for (var pos = 0; pos < string.length; pos++) {\n                        var c = string[pos];\n                        if (lastCharLess) {\n                            if (c !== \"-\") {\n                                nextSection();\n                                readingURI = true;\n                            }\n                            section += \"<\";\n                            lastCharLess = false;\n                        }\n                        if (c === \"<\") {\n                            lastCharLess = true;\n                            continue;\n                        }\n                        if (readingURI && c == \">\") {\n                            section += c;\n                            nextSection();\n                            readingURI = false;\n                            continue;\n                        }\n                        if (!readingURI && c == \"/\") {\n                            nextSection();\n                            continue;\n                        }\n                        section += c;\n                    }\n                    nextSection();\n                    return result;\n                }\n                var pathSections = splitPathSection(path); // .split(\"/\").filter(function(e) { return e.length > 0})\n                return resolveSubPath(graphNode, pathSections);\n            };\n\n            var rdf2h = this.view.rdf2h;\n            var graphNode = this.view.graphNode;\n            var graph = graphNode.graph;\n            var context = this.view.context;\n            var currentMatcherIndex = this.view.currentMatcherIndex;\n\n            if (name.startsWith(\"@prefix \")) {\n                var splits = name.split(\" \");\n                var prefixPart = splits[1];\n                var iriPart = splits[2];\n                var prefix = prefixPart.substring(0, prefixPart.length - 1);\n                var iri = iriPart.substring(1, iriPart.length - 1);\n                RDF2h.prefixMap[prefix] = iri;\n                return \"\";\n            }\n            if (name.startsWith(\":render \")) {\n                var splits = name.split(\" \");\n                var nodePath = splits[1];\n                var subContext = splits[2];\n                if (subContext) {\n                    subContext = RDF2h.resolveCurie(subContext);\n                }\n                if (!subContext) {\n                    subContext = context;\n                }\n                var resolvedNodes = resolvePath(nodePath);\n                if (resolvedNodes.length > 1) {\n                    console.warn(\"Argument of render evaluates to more than one node!\");\n                }\n                if (resolvedNodes.length > 0) {\n                    return rdf2h.render(graph, resolvedNodes[0], subContext);\n                } else {\n                    return \"\";\n                }\n            }\n            if (name.startsWith(\":continue\")) {\n                var splits = name.split(\" \");\n                var subContext = splits[1];\n                if (subContext) {\n                    subContext = RDF2h.resolveCurie(subContext);\n                }\n                if (!subContext) {\n                    subContext = context;\n                }\n                if (graphNode.nodes.length > 1) {\n                    console.warn(\":continue invoked in context with more than one node, this shouldn't be possible!\");\n                }\n                return rdf2h.render(graph, graphNode.nodes[0], subContext, currentMatcherIndex + 1);\n            }\n            if (name.startsWith(\"+\")) {\n                name = name.substring(1);\n                return resolvePath(name).length > 0;\n            }\n            var nodes = resolvePath(name);\n            if (nodes.length === 1) {\n                return new RDF2h.Renderee(rdf2h, GraphNode(nodes[0], graph), context);\n            } else {\n                return nodes.map(function (node) {\n                    return new RDF2h.Renderee(rdf2h, GraphNode(node, graph), context);\n                });\n            }\n            /*var node = this.view;\n             if (name === \".\") {\n             return node;\n             } else {\n             return \"not supported: \"+name;\n             }*/\n        } else {\n            return origLokup.call(this, name);\n        }\n    };\n})();\n\nRDF2h.Renderee = function (rdf2h, graphNode, context) {\n    if (!graphNode.nodes) {\n        throw new Error(\"second argument must be a GraphNode\");\n    }\n    if (graphNode.nodes.length !== 1) {\n        throw new Error(\"Renderee must be a single node\");\n    }\n    this.rdf2h = rdf2h;\n    this.graphNode = graphNode;\n    this.context = context;\n};\n\nRDF2h.Renderee.prototype.toString = function () {\n    if (this.graphNode.value) {\n        return this.graphNode.value;\n    }\n    return this.graphNode.toString();\n};\n\nRDF2h.prototype.getRenderer = function (renderee) {\n    var _this = this;\n\n    var r2h = vocab.rdf2h;\n    var tbox = this.tbox;\n    function matchesContext(cfRenderer) {\n        var contexts = cfRenderer.out(r2h(\"context\")).nodes;\n        if (contexts.length === 0) {\n            console.debug(\"renderer \" + cfRenderer + \" specifies no context, thus accepting it for \" + renderee.context);\n            return true;\n        }\n        return contexts.some(function (context) {\n            if (renderee.context.equals(context)) {\n                console.debug(\"renderer \" + cfRenderer + \" matches the context \" + renderee.context);\n                return true;\n            }\n        });\n    }\n    function resolveRendererNode(rendererURI) {\n        if (!window) {\n            return \"Could not get renderer: \" + rendererURI + \", no window object.\";\n        }\n        var pageURIPrefix = window.location + \"#\";\n        if (!rendererURI.startsWith(pageURIPrefix)) {\n            return \"Could not get renderer: \" + rendererURI + \", the prefix must be \" + pageURIPrefix + \".\";\n        }\n        var id = rendererURI.substring(pageURIPrefix.length);\n        return document.getElementById(id).textContent;\n    }\n    function rendererRenderer(renderer) {\n        return function (renderee) {\n            return Mustache.render(renderer, renderee);\n        };\n    }\n    function getTypes(graphNode) {\n        //the array might contain rdfs:Resource twice (at the end)\n        return graphNode.out(vocab.rdf(\"type\")).nodes.sort(function (a, b) {\n            if (a.equals(b)) {\n                return 0;\n            }\n            if (a.equals(vocab.rdfs(\"Resource\"))) {\n                return 1;\n            }\n            if (b.equals(vocab.rdfs(\"Resource\"))) {\n                return -1;\n            }\n            if (tbox.match(a, vocab.rdfs(\"subClassOf\"), b).length === 0) {\n                if (tbox.match(b, vocab.rdfs(\"subClassOf\"), a).length === 0) {\n                    return a.value.localeCompare(b.value);\n                } else {\n                    return 1;\n                }\n            } else {\n                return -1;\n            }\n        }).concat([vocab.rdfs(\"Resource\")]);\n    }\n    function getMatchingRenderer(types, context) {\n        function getMatching(renderers) {\n            return renderers.find(function (renderer) {\n                return context.equals(renderer.out(vocab.rdf2h(\"context\")).node);\n            });\n        }\n        return [false].concat(types).reduce(function (renderer, type) {\n            return renderer ? renderer : getMatching(type.in(vocab.rdf2h(\"type\")).split());\n        });\n    }\n    var types = getTypes(renderee.graphNode).map(function (t) {\n        return GraphNode(t, _this.matcherGraph);\n    });\n    var renderer = getMatchingRenderer(types, renderee.context);\n    if (!renderer) {\n        throw Error(\"No renderer found with context: \" + renderee.context + \" for any of the types \" + types.map(function (t) {\n            return \"<\" + t.value + \">\";\n        }).join() + \". The resource <\" + renderee.graphNode.value + \"> could thus not be rendered.\");\n    }\n    var mustache = renderer.out(vocab.rdf2h(\"mustache\"));\n    if (mustache.nodes.length > 0) {\n        return rendererRenderer(mustache.value);\n    }\n    var js = renderer.out(vocab.rdf2h(\"javaScript\"));\n    return function (renderee) {\n        try {\n            return new Function(\"n\", \"context\", \"$rdf\", \"render\", \"GraphNode\", \"env\", js.value)(renderee.graphNode, renderee.context, rdf, function (n, context) {\n                return renderee.rdf2h.render(n.graph, n.node, context ? context : renderee.context);\n            }, GraphNode, renderee.rdf2h.env);\n        } catch (err) {\n            err.message = err.message + \" in \" + js.value;\n            var stackLines = err.stack.split(\"\\n\");\n            var lineWithSelf = stackLines.findIndex(function (l) {\n                return l.indexOf(\"RDF2h.render\") > 0;\n            });\n            err.stack = stackLines.splice(0, lineWithSelf - 1).join(\"\\n\");\n            throw err;\n        }\n    };\n\n    /*\n    if (this.startMatcherIndex === 0) {\n        return rendererRenderer('<div class=\"missingRenderer\">No renderer found for &lt;{{.}}&gt; in context &lt;'+renderee.context+'&gt;</div>');\n    } else {\n        return rendererRenderer('<div class=\"noMoreRenderer\">No more renderer available for &lt;{{.}}&gt; in context &lt;'+renderee.context+'&gt;</div>');\n    }*/\n};\n\nRDF2h.prototype.render = function (graph, node, context, startMatcherIndex) {\n    if (!node.termType) {\n        node = rdf.sym(node);\n    }\n    if (!context) {\n        context = vocab.rdf2h(\"Default\");\n    }\n    //wrap all in one object that gets special care by lookup\n    var renderee = new RDF2h.Renderee(this, GraphNode(node, graph), context);\n    if (!startMatcherIndex) {\n        this.startMatcherIndex = 0;\n    } else {\n        this.startMatcherIndex = startMatcherIndex;\n    }\n    var renderer = this.getRenderer(renderee);\n    return renderer(renderee);\n};\n\nRDF2h.prefixMap = {};\nRDF2h.prefixMap[\"rdf\"] = \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\";\nRDF2h.prefixMap[\"rdfs\"] = \"http://www.w3.org/2000/01/rdf-schema#\";\nRDF2h.prefixMap[\"r2h\"] = \"http://rdf2h.github.io/2015/rdf2h#\";\nRDF2h.prefixMap[\"schema\"] = \"http://schema.org/\";\nRDF2h.prefixMap[\"rdf\"] = \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\";\nRDF2h.prefixMap[\"dct\"] = \"http://purl.org/dc/terms/\";\n\nRDF2h.resolveCurie = function (curie) {\n    if (curie.startsWith(\"<\") && curie.endsWith(\">\")) {\n        //URI, not a curie\n        return rdf.sym(curie.substring(1, curie.length - 1));\n    }\n    console.debug(\"resolving \" + curie);\n    var splits = curie.split(\":\");\n    var prefix = splits[0];\n    var suffix = splits[1];\n    if (RDF2h.prefixMap[prefix]) {\n        return rdf.sym(RDF2h.prefixMap[prefix] + suffix);\n    } else {\n        return rdf.sym(curie);\n    }\n};\n\nif (typeof window !== 'undefined') {\n    window.RDF2h = RDF2h;\n}\n\nif (true) {\n    module.exports = RDF2h;\n}\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _createClass = function () {\n    function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n    };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n\n/**\n * Node Status:\n * \n * Locally undetermined: There are multiple local nodes satisfying the criteria specified for this object \n * Blank: The object represents a blank node in a graph that is locally available\n * Unresolved: This node is identified by a URI that has not yet been derefernced\n * \n * @type type\n */\nif (typeof $rdf === 'undefined') {\n    var $rdf = __webpack_require__(0);\n}\n\nfunction GraphNode() {\n    return new (Function.prototype.bind.apply(GraphNode.Impl, [null].concat(Array.prototype.slice.call(arguments))))();\n}\n\nGraphNode.Impl = function () {\n    function _class(nodes, graph, sources) {\n        _classCallCheck(this, _class);\n\n        this._graph = graph;\n        if (Array.isArray(nodes)) {\n            this.nodes = nodes;\n            /*if (this.nodes.length === 0) {\n                throw \"Can't represent empty set of nodes\";\n            }*/\n        } else {\n            this.nodes = [nodes];\n        }\n        this.sources = sources;\n    }\n\n    _createClass(_class, [{\n        key: \"fetch\",\n        value: function fetch() {\n            var _this = this;\n\n            if (this.termType !== \"NamedNode\" || this.sources && this.sources.indexOf(this.value.split(\"#\")[0]) > -1) {\n                return Promise.resolve(this);\n            } else {\n                //TODO extend existing graph?\n                var uri = this.value.split(\"#\")[0];\n                return GraphNode.rdfFetch(uri).then(function (response) {\n                    return GraphNode(_this.node, response.graph, [uri]);\n                });\n            }\n        }\n\n        /*\n         * \n         * @param {type} f\n         * @returns {unresolved} a promise that is satisfied when all promises returned by f are resolved\n         */\n\n    }, {\n        key: \"each\",\n        value: function each(f) {\n            var _this2 = this;\n\n            var results = this.nodes.map(function (node) {\n                return f(GraphNode([node], _this2.graph, _this2.sources));\n            });\n            return Promise.all(results);\n        }\n    }, {\n        key: \"fetchEach\",\n        value: function fetchEach(f) {\n            var _this3 = this;\n\n            var results = this.nodes.map(function (node) {\n                return GraphNode([node], _this3.graph, _this3.sources).fetch().then(f);\n            });\n            return Promise.all(results);\n        }\n\n        /**\n         * Returns a GraphNode for each node represented by this GraphNode\n         */\n\n    }, {\n        key: \"split\",\n        value: function split() {\n            var _this4 = this;\n\n            return this.nodes.map(function (node) {\n                return GraphNode([node], _this4.graph, _this4.sources);\n            });\n        }\n    }, {\n        key: \"out\",\n        value: function out(predicate) {\n            var nodes = this.graph.each(this.node, predicate);\n            /*if (nodes.length === 0) {\n                throw \"No property \"+predicate+\" on \"+this.node;\n            }*/\n            return GraphNode(nodes, this.graph, this.sources);\n        }\n    }, {\n        key: \"in\",\n        value: function _in(predicate) {\n            var statements = this.graph.statementsMatching(undefined, predicate, this.node);\n            /*if (statements.length === 0) {\n                throw \"No property \"+predicate+\" pointing to \"+this.node;\n            }*/\n            return GraphNode(statements.map(function (statement) {\n                return statement.subject;\n            }), this.graph, this.sources);\n        }\n    }, {\n        key: \"graph\",\n        get: function get() {\n            if (!this._graph) {\n                throw Error(\"Operation not possible as no Graph is available, try fetching first\");\n            }\n            return this._graph;\n        }\n    }, {\n        key: \"node\",\n        get: function get() {\n            if (this.nodes.length !== 1) {\n                throw Error(\"Operation not possible as this GraphNode is underdetermined\");\n            }\n            return this.nodes[0];\n        }\n    }, {\n        key: \"termType\",\n        get: function get() {\n            return this.node.termType;\n        }\n    }, {\n        key: \"value\",\n        get: function get() {\n            ;\n            return this.node.value;\n        }\n    }]);\n\n    return _class;\n}();\n\n/**\n * \n * Fetches an RDF graph. If the server return 401 the login process will be \n * started upon which the fetch will be retried.\n *\n * @param uri {string} The URI to be fetched\n * @param options passed to $rdf.Fetcher\n * @param login {boolean} The login function to be called, optional\n *\n * @return {Promise<Response>} Response has a `graph`property with the rertived graph\n */\nGraphNode.rdfFetch = function (uri, options, login) {\n    var ggg = this;\n    return new Promise(function (resolve, reject) {\n        var graph = $rdf.graph();\n        var fetcher = new $rdf.Fetcher(graph, options);\n        fetcher.fetch(uri, {\n            \"redirect\": \"follow\"\n        }).then(function (response) {\n            if (response.status < 300) {\n                response.graph = graph;\n                resolve(response);\n            } else {\n                if (login && response.status === 401) {\n                    console.log(\"Got 401 response, attempting to login\");\n                    return login().then(function () {\n                        return ggg.rdfFetch(uri);\n                    });\n                } else {\n                    reject(response);\n                }\n            }\n        });\n    });\n};\n\nif (true) {\n    module.exports = GraphNode;\n}\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */\n\n/*global define: false Mustache: true*/\n\n(function defineMustache(global, factory) {\n  if (( false ? 'undefined' : _typeof(exports)) === 'object' && exports && typeof exports.nodeName !== 'string') {\n    factory(exports); // CommonJS\n  } else if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD\n  } else {\n    global.Mustache = {};\n    factory(global.Mustache); // script, wsh, asp\n  }\n})(undefined, function mustacheFactory(mustache) {\n\n  var objectToString = Object.prototype.toString;\n  var isArray = Array.isArray || function isArrayPolyfill(object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n\n  function isFunction(object) {\n    return typeof object === 'function';\n  }\n\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n  function typeStr(obj) {\n    return isArray(obj) ? 'array' : typeof obj === 'undefined' ? 'undefined' : _typeof(obj);\n  }\n\n  function escapeRegExp(string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n  function hasProperty(obj, propName) {\n    return obj != null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && propName in obj;\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var regExpTest = RegExp.prototype.test;\n  function testRegExp(re, string) {\n    return regExpTest.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace(string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  function escapeHtml(string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap(s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   */\n  function parseTemplate(template, tags) {\n    if (!template) return [];\n\n    var sections = []; // Stack to hold section tokens\n    var tokens = []; // Buffer to hold the tokens\n    var spaces = []; // Indices of whitespace tokens on the current line\n    var hasTag = false; // Is there a {{tag}} on the current line?\n    var nonSpace = false; // Is there a non-space char on the current line?\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace() {\n      if (hasTag && !nonSpace) {\n        while (spaces.length) {\n          delete tokens[spaces.pop()];\n        }\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags(tagsToCompile) {\n      if (typeof tagsToCompile === 'string') tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2) throw new Error('Invalid tags: ' + tagsToCompile);\n\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n          } else {\n            nonSpace = true;\n          }\n\n          tokens.push(['text', chr, start, start + 1]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n') stripSpace();\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe)) break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe)) throw new Error('Unclosed tag at ' + scanner.pos);\n\n      token = [type, value, start, scanner.pos];\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection) throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value) throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection) throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens(tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens(tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n        default:\n          collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner(string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function eos() {\n    return this.tail === '';\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function scan(re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0) return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function scanUntil(re) {\n    var index = this.tail.search(re),\n        match;\n\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n      case 0:\n        match = '';\n        break;\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context(view, parentContext) {\n    this.view = view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function push(view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function lookup(name) {\n    var cache = this.cache;\n\n    var value;\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this,\n          names,\n          index,\n          lookupHit = false;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          value = context.view;\n          names = name.split('.');\n          index = 0;\n\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           **/\n          while (value != null && index < names.length) {\n            if (index === names.length - 1) lookupHit = hasProperty(value, names[index]);\n\n            value = value[names[index++]];\n          }\n        } else {\n          value = context.view[name];\n          lookupHit = hasProperty(context.view, name);\n        }\n\n        if (lookupHit) break;\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value)) value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer() {\n    this.cache = {};\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function clearCache() {\n    this.cache = {};\n  };\n\n  /**\n   * Parses and caches the given `template` and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function parse(template, tags) {\n    var cache = this.cache;\n    var tokens = cache[template];\n\n    if (tokens == null) tokens = cache[template] = parseTemplate(template, tags);\n\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   */\n  Writer.prototype.render = function render(template, view, partials) {\n    var tokens = this.parse(template);\n    var context = view instanceof Context ? view : new Context(view);\n    return this.renderTokens(tokens, context, partials, template);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function renderTokens(tokens, context, partials, originalTemplate) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);else if (symbol === '>') value = this.renderPartial(token, context, partials, originalTemplate);else if (symbol === '&') value = this.unescapedValue(token, context);else if (symbol === 'name') value = this.escapedValue(token, context);else if (symbol === 'text') value = this.rawValue(token);\n\n      if (value !== undefined) buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderSection = function renderSection(token, context, partials, originalTemplate) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender(template) {\n      return self.render(template, context, partials);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n      }\n    } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string') throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null) buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n    }\n    return buffer;\n  };\n\n  Writer.prototype.renderInverted = function renderInverted(token, context, partials, originalTemplate) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || isArray(value) && value.length === 0) return this.renderTokens(token[4], context, partials, originalTemplate);\n  };\n\n  Writer.prototype.renderPartial = function renderPartial(token, context, partials) {\n    if (!partials) return;\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null) return this.renderTokens(this.parse(value), context, partials, value);\n  };\n\n  Writer.prototype.unescapedValue = function unescapedValue(token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null) return value;\n  };\n\n  Writer.prototype.escapedValue = function escapedValue(token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null) return mustache.escape(value);\n  };\n\n  Writer.prototype.rawValue = function rawValue(token) {\n    return token[1];\n  };\n\n  mustache.name = 'mustache.js';\n  mustache.version = '2.3.0';\n  mustache.tags = ['{{', '}}'];\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function clearCache() {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function parse(template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view` and `partials` using the\n   * default writer.\n   */\n  mustache.render = function render(template, view, partials) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' + 'but \"' + typeStr(template) + '\" was given as the first ' + 'argument for mustache#render(template, view, partials)');\n    }\n\n    return defaultWriter.render(template, view, partials);\n  };\n\n  // This is here for backwards compatibility with 0.4.x.,\n  /*eslint-disable */ // eslint wants camel cased function name\n  mustache.to_html = function to_html(template, view, partials, send) {\n    /*eslint-enable*/\n\n    var result = mustache.render(template, view, partials);\n\n    if (isFunction(send)) {\n      send(result);\n    } else {\n      return result;\n    }\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n  return mustache;\n});\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar $rdf = __webpack_require__(0);\n\nmodule.exports = {\n    schema: function schema(suffix) {\n        return $rdf.sym(\"http://schema.org/\" + suffix);\n    },\n    rdf: function rdf(suffix) {\n        return $rdf.sym(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" + suffix);\n    },\n    rdfs: function rdfs(suffix) {\n        return $rdf.sym(\"http://www.w3.org/2000/01/rdf-schema#\" + suffix);\n    },\n    foaf: function foaf(suffix) {\n        return $rdf.sym(\"http://xmlns.com/foaf/0.1/\" + suffix);\n    },\n    rdf2h: function rdf2h(suffix) {\n        return $rdf.sym(\"http://rdf2h.github.io/2015/rdf2h#\" + suffix);\n    }\n};\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// js/rdf2h.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 5094c47fc10908460e2e","module.exports = $rdf;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"$rdf\"\n// module id = 0\n// module chunks = 0","var rdf = require(\"rdflib\");\nvar GraphNode = require(\"rdfgraphnode\");\nvar Mustache = require(\"mustache\");\nvar vocab = require(\"./vocab.js\");\nvar NodeSet = new Array();\n\n\nfunction RDF2h(matcherGraph, tbox) {\n    function r2h(suffix) {\n        return rdf.sym(\"http://rdf2h.github.io/2015/rdf2h#\"+suffix);\n    }\n    console.info(\"RDF2h created\");\n    this.matcherGraph = matcherGraph;\n    if (tbox) {\n        this.tbox = tbox;\n    } else {\n        this.tbox = matcherGraph;\n    }\n    this.env = {}; //this is to allow shared vars among renderers\n    var unorderedMatchers = new Array(); //new NodeSet();\n    var rdfTypeProperty = rdf.sym(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\");\n    var matcherType = r2h(\"Matcher\");\n    var matcherStatements = matcherGraph.statementsMatching(null, rdfTypeProperty, matcherType);\n    matcherStatements.forEach(function(t) {\n        unorderedMatchers.push(t.subject);\n    });\n    /*Sorting:\n     * \n     * Choose any matcher that is not the object of any before statement . \n     * Remove all before statements with that matcher as subject. \n     * Repeat till there are no more matchers that are not the object of a \n     * before statement. \n     * If there are matchers left the before statements are circular.\n     */   \n    var beforeProperty = r2h(\"before\");\n    var beforeStatements = matcherGraph.statementsMatching(null,beforeProperty);\n    beforeStatements.forEach(function(t) {\n        unorderedMatchers.push(t.subject);\n        unorderedMatchers.push(t.object);\n    });\n    this.sortedMatchers = [];\n    var self = this;\n    while (unorderedMatchers.length > 0) {\n        if (!unorderedMatchers.some(function(current) {\n            //TODO if (beforeStatements.match(null, beforeProperty, current).length === 0) {\n            if (true) {\n                self.sortedMatchers.push(current);\n                unorderedMatchers = unorderedMatchers.filter(n => !n.equals(current));\n                //FIXME beforeStatements.removeMatches(current, beforeProperty);\n                return true; //stop iteration over unorderedMatchers\n            } else {\n                return false;\n            }\n        })) {\n            console.error(\"Circle Detected with:\\n\"+beforeStatements.toString());\n            break;\n        }\n    }\n    console.debug(\"Constructed RDF2h with the following matchers: \", this.sortedMatchers.map(function(m) {return m.toString();}));\n}\n\n\n(function () {\n    var r2h = vocab.rdf2h;\n    var origLokup = Mustache.Context.prototype.lookup;\n    Mustache.Context.prototype.lookup = function (name) {\n        if (this.view instanceof RDF2h.Renderee) {\n            var rdf2h = this.view.rdf2h;\n            var graphNode = this.view.graphNode;\n            var graph = graphNode.graph;\n            var context = this.view.context;\n            var currentMatcherIndex = this.view.currentMatcherIndex;\n            function resolvePath(path) {\n                function resolveSubPath(node, pathSections) {\n                    function resolveSection(section) {\n                        if (section === \".\") {\n                            return node;\n                        } else {\n                            if (section.endsWith(\"<-\")) {\n                                return node.in(RDF2h.resolveCurie(section.substring(0, section.length - 2)));\n                            } else {\n                                if (section.startsWith(\"^\")) {\n                                    return node.in(RDF2h.resolveCurie(section.substring(1)));\n                                } else {\n                                    return node.out(RDF2h.resolveCurie(section));\n                                }\n                            }\n                        }\n                    }\n                    let subNode = resolveSection(pathSections[0]);\n                    if (pathSections.length === 1) {\n                        var resultNodes = subNode.nodes;\n                        if (resultNodes.length === 0) {\n                            //handling pseudo properties of literals\n                            if (node.nodes[0].language) {\n                                if (RDF2h.resolveCurie(pathSections[0]).equals(rdf.sym(\"http://purl.org/dc/terms/language\"))) {\n                                    return [rdf.literal(node.nodes[0].language)];\n                                }\n                            }\n                            if (node.nodes[0].datatype) {\n                                if (RDF2h.resolveCurie(pathSections[0]).equals(RDF2h.resolveCurie(\"rdf:type\"))) {\n                                    return [node.nodes[0].datatype];\n                                }\n                            }\n                        }\n                        return resultNodes;\n                    }\n                    return resolveSubPath(subNode,pathSections.slice(1))    \n                }\n                function splitPathSection(string) {\n                    let result = [];\n                    let readingURI = false;\n                    let lastCharLess = false;\n                    let section = \"\";\n                    function nextSection() {\n                        if (section.length > 0) {\n                            result.push(section);\n                            section = \"\";    \n                        }\n                    }\n                    for (var pos = 0; pos < string.length; pos++) {    \n                        let c = string[pos];\n                        if (lastCharLess) {\n                            if (c !== \"-\") {\n                                nextSection();\n                                readingURI = true;\n                            }\n                            section += \"<\";\n                            lastCharLess = false;\n                        }\n                        if (c === \"<\") {\n                            lastCharLess = true;\n                            continue;\n                        }\n                        if (readingURI && (c == \">\")) {\n                            section += c;\n                            nextSection();\n                            readingURI = false;\n                            continue;\n                        }\n                        if (!readingURI && (c == \"/\")) {\n                            nextSection();\n                            continue;\n                        }\n                        section += c;\n                    }\n                    nextSection();\n                    return result;\n                }\n                var pathSections = splitPathSection(path);// .split(\"/\").filter(function(e) { return e.length > 0})\n                return resolveSubPath(graphNode, pathSections);\n            }\n            if (name.startsWith(\"@prefix \")) {\n                var splits = name.split(\" \");\n                var prefixPart = splits[1];\n                var iriPart = splits[2];\n                var prefix = prefixPart.substring(0, prefixPart.length -1);\n                var iri = iriPart.substring(1, iriPart.length -1);\n                RDF2h.prefixMap[prefix] = iri;\n                return \"\";\n            }\n            if (name.startsWith(\":render \")) {\n                var splits = name.split(\" \");\n                var nodePath = splits[1];\n                var subContext = splits[2];\n                if (subContext) {\n                    subContext = RDF2h.resolveCurie(subContext);\n                }\n                if (!subContext) {\n                    subContext = context;\n                }\n                var resolvedNodes = resolvePath(nodePath);\n                if (resolvedNodes.length > 1) {\n                    console.warn(\"Argument of render evaluates to more than one node!\")\n                }\n                if (resolvedNodes.length > 0) {\n                    return rdf2h.render(graph, resolvedNodes[0], subContext)\n                } else {\n                    return \"\";\n                }\n            }\n            if (name.startsWith(\":continue\")) {\n                var splits = name.split(\" \");\n                var subContext = splits[1];\n                if (subContext) {\n                    subContext = RDF2h.resolveCurie(subContext);\n                }\n                if (!subContext) {\n                    subContext = context;\n                }\n                if (graphNode.nodes.length > 1) {\n                    console.warn(\":continue invoked in context with more than one node, this shouldn't be possible!\")\n                }\n                return rdf2h.render(graph, graphNode.nodes[0], subContext, currentMatcherIndex + 1);\n\n            }\n            if (name.startsWith(\"+\")) {\n                name = name.substring(1);\n                return (resolvePath(name).length > 0);\n            }\n            var nodes = resolvePath(name);\n            if (nodes.length === 1) {\n                return new RDF2h.Renderee(rdf2h, GraphNode(nodes[0], graph), context);\n            } else {\n                return nodes.map(function (node) {\n                    return new RDF2h.Renderee(rdf2h, GraphNode(node, graph), context);\n                });\n            }\n            /*var node = this.view;\n             if (name === \".\") {\n             return node;\n             } else {\n             return \"not supported: \"+name;\n             }*/\n        } else {\n            return origLokup.call(this, name);\n        }\n    };\n})();\n\nRDF2h.Renderee = function (rdf2h, graphNode, context) {\n    if (!graphNode.nodes) {\n        throw new Error(\"second argument must be a GraphNode\");\n    }\n    if (graphNode.nodes.length !== 1) {\n        throw new Error(\"Renderee must be a single node\");\n    }\n    this.rdf2h = rdf2h;\n    this.graphNode = graphNode;\n    this.context = context;\n};\n\nRDF2h.Renderee.prototype.toString = function () {\n    if (this.graphNode.value) {\n        return this.graphNode.value;\n    }\n    return this.graphNode.toString();\n}\n\nRDF2h.prototype.getRenderer = function (renderee) {\n    var r2h = vocab.rdf2h;\n    let tbox = this.tbox;\n    function matchesContext(cfRenderer) {\n        var contexts = cfRenderer.out(r2h(\"context\")).nodes;\n        if (contexts.length === 0) {\n            console.debug(\"renderer \"+cfRenderer+\" specifies no context, thus accepting it for \"+renderee.context);\n            return true;\n        }\n        return contexts.some(function(context) {\n            if (renderee.context.equals(context)) {\n                console.debug(\"renderer \"+cfRenderer+\" matches the context \"+renderee.context);\n                return true;\n            }\n        });\n    }\n    function resolveRendererNode(rendererURI) {\n        if (!window) {\n            return \"Could not get renderer: \" + rendererURI + \", no window object.\"\n        }\n        var pageURIPrefix = window.location + \"#\";\n        if (!rendererURI.startsWith(pageURIPrefix)) {\n            return \"Could not get renderer: \" + rendererURI + \", the prefix must be \" + pageURIPrefix + \".\"\n        }\n        var id = rendererURI.substring(pageURIPrefix.length);\n        return document.getElementById(id).textContent;\n    }\n    function rendererRenderer(renderer) {\n        return function (renderee) {\n            return Mustache.render(renderer, renderee);\n        };\n    }\n    function getTypes(graphNode) {\n        //the array might contain rdfs:Resource twice (at the end)\n        return graphNode.out(vocab.rdf(\"type\")).nodes.sort(\n            (a,b) => {\n                if (a.equals(b)) {\n                    return 0;\n                }\n                if (a.equals(vocab.rdfs(\"Resource\"))) {\n                    return 1;\n                }\n                if (b.equals(vocab.rdfs(\"Resource\"))) {\n                    return -1;\n                }\n                if (tbox.match(a, vocab.rdfs(\"subClassOf\"),b).length === 0) {\n                    if (tbox.match(b, vocab.rdfs(\"subClassOf\"),a).length === 0) {\n                        return a.value.localeCompare(b.value);\n                    } else {\n                        return 1;\n                    }\n                } else {\n                    return -1;\n                }\n            }\n        ).concat([vocab.rdfs(\"Resource\")]);\n    }\n    function getMatchingRenderer(types, context) {\n        function getMatching(renderers) {\n            return renderers.find(renderer => context.equals(renderer.out(vocab.rdf2h(\"context\")).node));\n        }\n        return [false].concat(types).reduce((renderer, type) => \n            renderer ? renderer : getMatching(type.in(vocab.rdf2h(\"type\")).split()));\n    }\n    let types = getTypes(renderee.graphNode).map(t => GraphNode(t, this.matcherGraph));\n    let renderer = getMatchingRenderer(types, renderee.context);\n    if (!renderer) {\n        throw Error(\"No renderer found with context: \"+renderee.context+\" for any of the types \"+types.map(t => \"<\"+t.value+\">\").join()\n                    +\". The resource <\"+renderee.graphNode.value+\"> could thus not be rendered.\");\n    }\n    let mustache = renderer.out(vocab.rdf2h(\"mustache\"));\n    if (mustache.nodes.length > 0) {\n        return rendererRenderer(mustache.value);\n    }\n    let js = renderer.out(vocab.rdf2h(\"javaScript\"))\n    return function (renderee) {\n        try {\n            return (new Function(\"n\", \"context\", \"$rdf\", \"render\", \"GraphNode\", \"env\", js.value))(renderee.graphNode, renderee.context, rdf, (n, context) => {\n                return renderee.rdf2h.render(n.graph, n.node, context ? context : renderee.context);\n            }, GraphNode, renderee.rdf2h.env);\n        } catch(err) {\n            err.message = err.message + \" in \" + js.value;\n            let stackLines = err.stack.split(\"\\n\");\n            let lineWithSelf = stackLines.findIndex(l => l.indexOf(\"RDF2h.render\") > 0);\n            err.stack = stackLines.splice(0, lineWithSelf - 1).join(\"\\n\");\n            throw err;\n        }\n    };\n    \n    \n    /*\n    if (this.startMatcherIndex === 0) {\n        return rendererRenderer('<div class=\"missingRenderer\">No renderer found for &lt;{{.}}&gt; in context &lt;'+renderee.context+'&gt;</div>');\n    } else {\n        return rendererRenderer('<div class=\"noMoreRenderer\">No more renderer available for &lt;{{.}}&gt; in context &lt;'+renderee.context+'&gt;</div>');\n    }*/\n\n}\n\nRDF2h.prototype.render = function (graph, node, context, startMatcherIndex) {\n    if (!node.termType) {\n        node = rdf.sym(node);\n    }\n    if (!context) {\n        context = vocab.rdf2h(\"Default\");\n    }\n    //wrap all in one object that gets special care by lookup\n    var renderee = new RDF2h.Renderee(this, GraphNode(node, graph), context);\n    if (!startMatcherIndex) {\n        this.startMatcherIndex = 0;\n    } else {\n        this.startMatcherIndex = startMatcherIndex;\n    }\n    var renderer = this.getRenderer(renderee);\n    return renderer(renderee);\n}\n\nRDF2h.prefixMap = {};\nRDF2h.prefixMap[\"rdf\"] = \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\";\nRDF2h.prefixMap[\"rdfs\"] = \"http://www.w3.org/2000/01/rdf-schema#\";\nRDF2h.prefixMap[\"r2h\"] = \"http://rdf2h.github.io/2015/rdf2h#\";\nRDF2h.prefixMap[\"schema\"] = \"http://schema.org/\";\nRDF2h.prefixMap[\"rdf\"] = \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\";\nRDF2h.prefixMap[\"dct\"] = \"http://purl.org/dc/terms/\";\n\n\nRDF2h.resolveCurie = function (curie) {\n    if (curie.startsWith(\"<\") && curie.endsWith(\">\")) {\n        //URI, not a curie\n        return rdf.sym(curie.substring(1, curie.length - 1));\n    }\n    console.debug(\"resolving \" + curie);\n    var splits = curie.split(\":\");\n    var prefix = splits[0];\n    var suffix = splits[1];\n    if (RDF2h.prefixMap[prefix]) {\n        return rdf.sym(RDF2h.prefixMap[prefix] + suffix);\n    } else {\n        return rdf.sym(curie);\n    }\n\n};\n\nif (typeof window !== 'undefined') {\n    window.RDF2h = RDF2h;\n}\n\nif (typeof module !== 'undefined') {\n    module.exports = RDF2h;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/rdf2h.js","\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Node Status:\n * \n * Locally undetermined: There are multiple local nodes satisfying the criteria specified for this object \n * Blank: The object represents a blank node in a graph that is locally available\n * Unresolved: This node is identified by a URI that has not yet been derefernced\n * \n * @type type\n */\nif (typeof $rdf === 'undefined') {\n    var $rdf = require(\"rdflib\");\n}\n\nfunction GraphNode() {\n    return new (Function.prototype.bind.apply(GraphNode.Impl, [null].concat(Array.prototype.slice.call(arguments))))();\n}\n\nGraphNode.Impl = function () {\n    function _class(nodes, graph, sources) {\n        _classCallCheck(this, _class);\n\n        this._graph = graph;\n        if (Array.isArray(nodes)) {\n            this.nodes = nodes;\n            /*if (this.nodes.length === 0) {\n                throw \"Can't represent empty set of nodes\";\n            }*/\n        } else {\n            this.nodes = [nodes];\n        }\n        this.sources = sources;\n    }\n\n    _createClass(_class, [{\n        key: \"fetch\",\n        value: function fetch() {\n            var _this = this;\n\n            if (this.termType !== \"NamedNode\" || this.sources && this.sources.indexOf(this.value.split(\"#\")[0]) > -1) {\n                return Promise.resolve(this);\n            } else {\n                //TODO extend existing graph?\n                var uri = this.value.split(\"#\")[0];\n                return GraphNode.rdfFetch(uri).then(function (response) {\n                    return GraphNode(_this.node, response.graph, [uri]);\n                });\n            }\n        }\n\n        /*\n         * \n         * @param {type} f\n         * @returns {unresolved} a promise that is satisfied when all promises returned by f are resolved\n         */\n\n    }, {\n        key: \"each\",\n        value: function each(f) {\n            var _this2 = this;\n\n            var results = this.nodes.map(function (node) {\n                return f(GraphNode([node], _this2.graph, _this2.sources));\n            });\n            return Promise.all(results);\n        }\n    }, {\n        key: \"fetchEach\",\n        value: function fetchEach(f) {\n            var _this3 = this;\n\n            var results = this.nodes.map(function (node) {\n                return GraphNode([node], _this3.graph, _this3.sources).fetch().then(f);\n            });\n            return Promise.all(results);\n        }\n\n        /**\n         * Returns a GraphNode for each node represented by this GraphNode\n         */\n\n    }, {\n        key: \"split\",\n        value: function split() {\n            var _this4 = this;\n\n            return this.nodes.map(function (node) {\n                return GraphNode([node], _this4.graph, _this4.sources);\n            });\n        }\n    }, {\n        key: \"out\",\n        value: function out(predicate) {\n            var nodes = this.graph.each(this.node, predicate);\n            /*if (nodes.length === 0) {\n                throw \"No property \"+predicate+\" on \"+this.node;\n            }*/\n            return GraphNode(nodes, this.graph, this.sources);\n        }\n    }, {\n        key: \"in\",\n        value: function _in(predicate) {\n            var statements = this.graph.statementsMatching(undefined, predicate, this.node);\n            /*if (statements.length === 0) {\n                throw \"No property \"+predicate+\" pointing to \"+this.node;\n            }*/\n            return GraphNode(statements.map(function (statement) {\n                return statement.subject;\n            }), this.graph, this.sources);\n        }\n    }, {\n        key: \"graph\",\n        get: function get() {\n            if (!this._graph) {\n                throw Error(\"Operation not possible as no Graph is available, try fetching first\");\n            }\n            return this._graph;\n        }\n    }, {\n        key: \"node\",\n        get: function get() {\n            if (this.nodes.length !== 1) {\n                throw Error(\"Operation not possible as this GraphNode is underdetermined\");\n            }\n            return this.nodes[0];\n        }\n    }, {\n        key: \"termType\",\n        get: function get() {\n            return this.node.termType;\n        }\n    }, {\n        key: \"value\",\n        get: function get() {\n            ;\n            return this.node.value;\n        }\n    }]);\n\n    return _class;\n}();\n\n/**\n * \n * Fetches an RDF graph. If the server return 401 the login process will be \n * started upon which the fetch will be retried.\n *\n * @param uri {string} The URI to be fetched\n * @param options passed to $rdf.Fetcher\n * @param login {boolean} The login function to be called, optional\n *\n * @return {Promise<Response>} Response has a `graph`property with the rertived graph\n */\nGraphNode.rdfFetch = function (uri, options, login) {\n    var ggg = this;\n    return new Promise(function (resolve, reject) {\n        var graph = $rdf.graph();\n        var fetcher = new $rdf.Fetcher(graph, options);\n        fetcher.fetch(uri, {\n            \"redirect\": \"follow\"\n        }).then(function (response) {\n            if (response.status < 300) {\n                response.graph = graph;\n                resolve(response);\n            } else {\n                if (login && response.status === 401) {\n                    console.log(\"Got 401 response, attempting to login\");\n                    return login().then(function () {\n                        return ggg.rdfFetch(uri);\n                    });\n                } else {\n                    reject(response);\n                }\n            }\n        });\n    });\n};\n\nif (typeof module !== 'undefined') {\n    module.exports = GraphNode;\n}\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rdfgraphnode/distribution/main.js","/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */\n\n/*global define: false Mustache: true*/\n\n(function defineMustache (global, factory) {\n  if (typeof exports === 'object' && exports && typeof exports.nodeName !== 'string') {\n    factory(exports); // CommonJS\n  } else if (typeof define === 'function' && define.amd) {\n    define(['exports'], factory); // AMD\n  } else {\n    global.Mustache = {};\n    factory(global.Mustache); // script, wsh, asp\n  }\n}(this, function mustacheFactory (mustache) {\n\n  var objectToString = Object.prototype.toString;\n  var isArray = Array.isArray || function isArrayPolyfill (object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n\n  function isFunction (object) {\n    return typeof object === 'function';\n  }\n\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n  function typeStr (obj) {\n    return isArray(obj) ? 'array' : typeof obj;\n  }\n\n  function escapeRegExp (string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n  function hasProperty (obj, propName) {\n    return obj != null && typeof obj === 'object' && (propName in obj);\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var regExpTest = RegExp.prototype.test;\n  function testRegExp (re, string) {\n    return regExpTest.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace (string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  function escapeHtml (string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   */\n  function parseTemplate (template, tags) {\n    if (!template)\n      return [];\n\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace () {\n      if (hasTag && !nonSpace) {\n        while (spaces.length)\n          delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags (tagsToCompile) {\n      if (typeof tagsToCompile === 'string')\n        tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n        throw new Error('Invalid tags: ' + tagsToCompile);\n\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n          } else {\n            nonSpace = true;\n          }\n\n          tokens.push([ 'text', chr, start, start + 1 ]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n')\n            stripSpace();\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe))\n        break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe))\n        throw new Error('Unclosed tag at ' + scanner.pos);\n\n      token = [ type, value, start, scanner.pos ];\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection)\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value)\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection)\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens (tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens (tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n        default:\n          collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner (string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function eos () {\n    return this.tail === '';\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function scan (re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0)\n      return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function scanUntil (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n      case 0:\n        match = '';\n        break;\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context (view, parentContext) {\n    this.view = view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function push (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function lookup (name) {\n    var cache = this.cache;\n\n    var value;\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this, names, index, lookupHit = false;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          value = context.view;\n          names = name.split('.');\n          index = 0;\n\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           **/\n          while (value != null && index < names.length) {\n            if (index === names.length - 1)\n              lookupHit = hasProperty(value, names[index]);\n\n            value = value[names[index++]];\n          }\n        } else {\n          value = context.view[name];\n          lookupHit = hasProperty(context.view, name);\n        }\n\n        if (lookupHit)\n          break;\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value))\n      value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer () {\n    this.cache = {};\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function clearCache () {\n    this.cache = {};\n  };\n\n  /**\n   * Parses and caches the given `template` and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function parse (template, tags) {\n    var cache = this.cache;\n    var tokens = cache[template];\n\n    if (tokens == null)\n      tokens = cache[template] = parseTemplate(template, tags);\n\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   */\n  Writer.prototype.render = function render (template, view, partials) {\n    var tokens = this.parse(template);\n    var context = (view instanceof Context) ? view : new Context(view);\n    return this.renderTokens(tokens, context, partials, template);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);\n      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);\n      else if (symbol === '>') value = this.renderPartial(token, context, partials, originalTemplate);\n      else if (symbol === '&') value = this.unescapedValue(token, context);\n      else if (symbol === 'name') value = this.escapedValue(token, context);\n      else if (symbol === 'text') value = this.rawValue(token);\n\n      if (value !== undefined)\n        buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender (template) {\n      return self.render(template, context, partials);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string')\n        throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null)\n        buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n    }\n    return buffer;\n  };\n\n  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || (isArray(value) && value.length === 0))\n      return this.renderTokens(token[4], context, partials, originalTemplate);\n  };\n\n  Writer.prototype.renderPartial = function renderPartial (token, context, partials) {\n    if (!partials) return;\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null)\n      return this.renderTokens(this.parse(value), context, partials, value);\n  };\n\n  Writer.prototype.unescapedValue = function unescapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return value;\n  };\n\n  Writer.prototype.escapedValue = function escapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return mustache.escape(value);\n  };\n\n  Writer.prototype.rawValue = function rawValue (token) {\n    return token[1];\n  };\n\n  mustache.name = 'mustache.js';\n  mustache.version = '2.3.0';\n  mustache.tags = [ '{{', '}}' ];\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function clearCache () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function parse (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view` and `partials` using the\n   * default writer.\n   */\n  mustache.render = function render (template, view, partials) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                          'but \"' + typeStr(template) + '\" was given as the first ' +\n                          'argument for mustache#render(template, view, partials)');\n    }\n\n    return defaultWriter.render(template, view, partials);\n  };\n\n  // This is here for backwards compatibility with 0.4.x.,\n  /*eslint-disable */ // eslint wants camel cased function name\n  mustache.to_html = function to_html (template, view, partials, send) {\n    /*eslint-enable*/\n\n    var result = mustache.render(template, view, partials);\n\n    if (isFunction(send)) {\n      send(result);\n    } else {\n      return result;\n    }\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n  return mustache;\n}));\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/mustache/mustache.js","var $rdf = require(\"rdflib\");\n\nmodule.exports = {\n    schema: function (suffix) {\n        return $rdf.sym(\"http://schema.org/\" + suffix);\n    },\n    rdf: function (suffix) {\n        return $rdf.sym(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" + suffix);\n    },\n    rdfs: function (suffix) {\n        return $rdf.sym(\"http://www.w3.org/2000/01/rdf-schema#\" + suffix);\n    },\n    foaf: function (suffix) {\n        return $rdf.sym(\"http://xmlns.com/foaf/0.1/\" + suffix);\n    },\n    rdf2h: function(suffix) {\n        return $rdf.sym(\"http://rdf2h.github.io/2015/rdf2h#\"+suffix);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/vocab.js"],"sourceRoot":""}