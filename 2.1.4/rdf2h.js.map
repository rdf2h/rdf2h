{"version":3,"sources":["webpack://rdf2h/webpack/bootstrap","webpack://rdf2h/external \"$rdf\"","webpack://rdf2h/./src/vocab.js","webpack://rdf2h/./node_modules/mustache/mustache.js","webpack://rdf2h/external \"fetch\"","webpack://rdf2h/./node_modules/rdfgraphnode-rdfext/js/GraphNode.js","webpack://rdf2h/./src/rdf2h.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","$rdf","schema","suffix","sym","rdf","rdfs","foaf","rdf2h","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","factory","mustache","objectToString","toString","isArray","Array","isFunction","escapeRegExp","string","replace","hasProperty","obj","propName","regExpTest","RegExp","test","nonSpaceRe","isWhitespace","re","testRegExp","entityMap","&","<",">","\"","'","/","`","=","whiteRe","spaceRe","equalsRe","curlyRe","tagRe","Scanner","this","tail","pos","Context","view","parentContext","cache",".","parent","Writer","eos","scan","match","index","substring","length","scanUntil","search","push","lookup","names","context","lookupHit","indexOf","split","clearCache","parse","template","tags","tokens","openingTagRe","closingTagRe","closingCurlyRe","sections","spaces","hasTag","nonSpace","stripSpace","pop","compileTags","tagsToCompile","Error","start","type","chr","token","openSection","scanner","valueLength","charAt","nestedTokens","collector","numTokens","nestTokens","lastToken","squashedTokens","squashTokens","parseTemplate","render","partials","renderTokens","originalTemplate","symbol","buffer","undefined","renderSection","renderInverted","renderPartial","unescapedValue","escapedValue","rawValue","self","j","slice","escape","version","defaultWriter","TypeError","to_html","send","result","String","nodeName","apply","fetch","Headers","h","window","GraphNode","Impl","arguments","[object Object]","nodes","graph","sources","_graph","node","termType","Promise","resolve","uri","rdfFetch","then","response","f","results","map","all","predicate","each","statementsMatching","statement","subject","options","login","ggg","init","headers","set","ok","reject","mediaType","text","error","plainFetch","status","console","log","Mustache","vocab","RDF2h","rendererGraphs","tbox","reverse","env","origLokup","Renderee","resolvePath","path","pathSections","readingURI","lastCharLess","section","nextSection","splitPathSection","resolveSubPath","subNode","endsWith","in","resolveCurie","startsWith","out","resultNodes","language","equals","literal","datatype","graphNode","prefixPart","splits","iriPart","prefix","iri","prefixMap","subContext","nodePath","resolvedNodes","warn","getRenderer","renderee","types","sort","a","b","localeCompare","concat","renderer","reverseGraphs","reduce","find","getMatchingRenderer","join","rendererRenderer","js","output","returnValue","Function","err","message","stackLines","stack","lineWithSelf","findIndex","splice","curie"],"mappings":"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","file":"rdf2h.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","module.exports = $rdf;","var $rdf = require(\"ext-rdflib\");\n\nmodule.exports = {\n    schema: function (suffix) {\n        return $rdf.sym(\"http://schema.org/\" + suffix);\n    },\n    rdf: function (suffix) {\n        return $rdf.sym(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" + suffix);\n    },\n    rdfs: function (suffix) {\n        return $rdf.sym(\"http://www.w3.org/2000/01/rdf-schema#\" + suffix);\n    },\n    foaf: function (suffix) {\n        return $rdf.sym(\"http://xmlns.com/foaf/0.1/\" + suffix);\n    },\n    rdf2h: function(suffix) {\n        return $rdf.sym(\"http://rdf2h.github.io/2015/rdf2h#\"+suffix);\n    }\n}\n","/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */\n\n/*global define: false Mustache: true*/\n\n(function defineMustache (global, factory) {\n  if (typeof exports === 'object' && exports && typeof exports.nodeName !== 'string') {\n    factory(exports); // CommonJS\n  } else if (typeof define === 'function' && define.amd) {\n    define(['exports'], factory); // AMD\n  } else {\n    global.Mustache = {};\n    factory(global.Mustache); // script, wsh, asp\n  }\n}(this, function mustacheFactory (mustache) {\n\n  var objectToString = Object.prototype.toString;\n  var isArray = Array.isArray || function isArrayPolyfill (object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n\n  function isFunction (object) {\n    return typeof object === 'function';\n  }\n\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n  function typeStr (obj) {\n    return isArray(obj) ? 'array' : typeof obj;\n  }\n\n  function escapeRegExp (string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n  function hasProperty (obj, propName) {\n    return obj != null && typeof obj === 'object' && (propName in obj);\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var regExpTest = RegExp.prototype.test;\n  function testRegExp (re, string) {\n    return regExpTest.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace (string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  function escapeHtml (string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   */\n  function parseTemplate (template, tags) {\n    if (!template)\n      return [];\n\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace () {\n      if (hasTag && !nonSpace) {\n        while (spaces.length)\n          delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags (tagsToCompile) {\n      if (typeof tagsToCompile === 'string')\n        tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n        throw new Error('Invalid tags: ' + tagsToCompile);\n\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n          } else {\n            nonSpace = true;\n          }\n\n          tokens.push([ 'text', chr, start, start + 1 ]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n')\n            stripSpace();\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe))\n        break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe))\n        throw new Error('Unclosed tag at ' + scanner.pos);\n\n      token = [ type, value, start, scanner.pos ];\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection)\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value)\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection)\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens (tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens (tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n        default:\n          collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner (string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function eos () {\n    return this.tail === '';\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function scan (re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0)\n      return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function scanUntil (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n      case 0:\n        match = '';\n        break;\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context (view, parentContext) {\n    this.view = view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function push (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function lookup (name) {\n    var cache = this.cache;\n\n    var value;\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this, names, index, lookupHit = false;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          value = context.view;\n          names = name.split('.');\n          index = 0;\n\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           **/\n          while (value != null && index < names.length) {\n            if (index === names.length - 1)\n              lookupHit = hasProperty(value, names[index]);\n\n            value = value[names[index++]];\n          }\n        } else {\n          value = context.view[name];\n          lookupHit = hasProperty(context.view, name);\n        }\n\n        if (lookupHit)\n          break;\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value))\n      value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer () {\n    this.cache = {};\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function clearCache () {\n    this.cache = {};\n  };\n\n  /**\n   * Parses and caches the given `template` and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function parse (template, tags) {\n    var cache = this.cache;\n    var tokens = cache[template];\n\n    if (tokens == null)\n      tokens = cache[template] = parseTemplate(template, tags);\n\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   */\n  Writer.prototype.render = function render (template, view, partials) {\n    var tokens = this.parse(template);\n    var context = (view instanceof Context) ? view : new Context(view);\n    return this.renderTokens(tokens, context, partials, template);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);\n      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);\n      else if (symbol === '>') value = this.renderPartial(token, context, partials, originalTemplate);\n      else if (symbol === '&') value = this.unescapedValue(token, context);\n      else if (symbol === 'name') value = this.escapedValue(token, context);\n      else if (symbol === 'text') value = this.rawValue(token);\n\n      if (value !== undefined)\n        buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender (template) {\n      return self.render(template, context, partials);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string')\n        throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null)\n        buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n    }\n    return buffer;\n  };\n\n  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || (isArray(value) && value.length === 0))\n      return this.renderTokens(token[4], context, partials, originalTemplate);\n  };\n\n  Writer.prototype.renderPartial = function renderPartial (token, context, partials) {\n    if (!partials) return;\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null)\n      return this.renderTokens(this.parse(value), context, partials, value);\n  };\n\n  Writer.prototype.unescapedValue = function unescapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return value;\n  };\n\n  Writer.prototype.escapedValue = function escapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return mustache.escape(value);\n  };\n\n  Writer.prototype.rawValue = function rawValue (token) {\n    return token[1];\n  };\n\n  mustache.name = 'mustache.js';\n  mustache.version = '2.3.0';\n  mustache.tags = [ '{{', '}}' ];\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function clearCache () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function parse (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view` and `partials` using the\n   * default writer.\n   */\n  mustache.render = function render (template, view, partials) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                          'but \"' + typeStr(template) + '\" was given as the first ' +\n                          'argument for mustache#render(template, view, partials)');\n    }\n\n    return defaultWriter.render(template, view, partials);\n  };\n\n  // This is here for backwards compatibility with 0.4.x.,\n  /*eslint-disable */ // eslint wants camel cased function name\n  mustache.to_html = function to_html (template, view, partials, send) {\n    /*eslint-enable*/\n\n    var result = mustache.render(template, view, partials);\n\n    if (isFunction(send)) {\n      send(result);\n    } else {\n      return result;\n    }\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n  return mustache;\n}));\n","module.exports = fetch;","var $rdf = require(\"ext-rdflib\");\nvar fetch = require(\"node-fetch\");\n\n/**\n * Node Status:\n * \n * Locally undetermined: There are multiple local nodes satisfying the criteria specified for this object \n * Blank: The object represents a blank node in a graph that is locally available\n * Unresolved: This node is identified by a URI that has not yet been derefernced\n * \n * @type type\n */\n\nlet Headers = ((h) => h ? h : window.Headers)(fetch.Headers);\n\nfunction GraphNode() {\n    return new GraphNode.Impl(...arguments);\n}\n\nGraphNode.Impl = class {\n        \n        constructor(nodes, graph, sources) {\n            this._graph = graph;\n            if (Array.isArray(nodes)) {\n                this.nodes = nodes;\n                /*if (this.nodes.length === 0) {\n                    throw \"Can't represent empty set of nodes\";\n                }*/\n            } else {\n                this.nodes = [nodes];\n            }\n            this.sources = sources;\n        }\n        \n        get graph() {\n            if (!this._graph) {\n                throw Error(\"Operation not possible as no Graph is available, try fetching first\");\n            }\n            return this._graph;\n        }\n        \n        get node() {\n            if (this.nodes.length !== 1) {\n                throw Error(\"Operation not possible as this GraphNode is underdetermined\");\n            }\n            return this.nodes[0];\n        }\n        \n        get termType() {\n            return this.node.termType;\n        }\n        \n        get value() {;\n            return this.node.value;\n        }\n        \n        fetch() {\n            if ((this.termType !== \"NamedNode\") || \n                        (this.sources && this.sources.indexOf(this.value.split(\"#\")[0]) > -1)) {\n                return Promise.resolve(this);\n            } else {\n                //TODO extend existing graph?\n                var uri = this.value.split(\"#\")[0];\n                return GraphNode.rdfFetch(uri).then(response => response.graph()).then(graph => GraphNode(this.node, graph, [uri]));\n            }\n        }\n        \n        /*\n         * \n         * @param {type} f\n         * @returns {unresolved} a promise that is satisfied when all promises returned by f are resolved\n         */\n        each(f) {\n            var results = this.nodes.map(node => f(GraphNode([node], this.graph, this.sources)));\n            return Promise.all(results);\n        }\n        \n        fetchEach(f) {\n            var results = this.nodes.map(node => GraphNode([node], this.graph, this.sources).fetch().then(f));\n            return Promise.all(results);\n        }\n\n        /**\n         * Returns a GraphNode for each node represented by this GraphNode\n         */\n        split() {\n            return this.nodes.map(node => GraphNode([node], this.graph, this.sources));\n        }\n        \n        out(predicate) {\n            var nodes = this.graph.each(this.node, predicate);\n            /*if (nodes.length === 0) {\n                throw \"No property \"+predicate+\" on \"+this.node;\n            }*/\n            return GraphNode(nodes, this.graph, this.sources);\n        }\n        \n        in(predicate) {\n            var statements = this.graph.statementsMatching(undefined, predicate, this.node);\n            /*if (statements.length === 0) {\n                throw \"No property \"+predicate+\" pointing to \"+this.node;\n            }*/\n            return GraphNode(statements.map(statement => statement.subject), this.graph, this.sources);\n        }\n    }\n\n/**\n * \n * Fetches an RDF graph. If the server return 401 the login process will be \n * started upon which the fetch will be retried.\n *\n * @param uri {string} The URI to be fetched\n * @param options passed to $rdf.Fetcher\n * @param login {boolean} The login function to be called, optional\n *\n * @return {Promise<Response>} Response has a `graph`property with the rertived graph\n */\nGraphNode.rdfFetch = function(uri, options, login) {\n    function plainFetch(uri, init = {}) {\n        if (!init.headers) {\n            init.headers = new Headers();\n        }\n        if (!init.headers.get(\"Accept\")) {\n            init.headers.set(\"Accept\", \"text/turtle;q=1, application/n-triples;q=.9, \"+\n                \"application/rdf+xml;q=.8, application/ld+json;q=.7, */*;q=.1\");\n        }\n        return fetch(uri, init).then(response => {\n            if (response.ok) {\n                response.graph = () => new Promise((resolve, reject) => {\n                    let graph = $rdf.graph();\n                    let mediaType = response.headers.get(\"Content-type\").split(\";\")[0];\n                    return response.text().then(text => {\n                        $rdf.parse(text, graph, uri, mediaType, (error, graph) => {\n                            if (error) {\n                                reject(error);\n                            } else {\n                                resolve(graph);\n                            }\n                        });\n                    });\n                });\n                return response;\n            } else {\n                return response;\n            }\n        });\n    };\n    var ggg = this;\n    return plainFetch(uri, options).then(function (response) {\n        if (response.status < 300) {\n            return response;\n        } else {\n            if (login && response.status === 401) {\n                console.log(\"Got 401 response, attempting to login\");\n                return login().then(function () {\n                    return ggg.rdfFetch(uri, options);\n                });\n            } else {\n                return response;\n            }\n        }\n    });\n};\n\nmodule.exports = GraphNode;\n","var rdf = require(\"ext-rdflib\");\nvar GraphNode = require(\"rdfgraphnode-rdfext\");\nvar Mustache = require(\"mustache\");\nvar vocab = require(\"./vocab.js\");\nvar NodeSet = new Array();\n\n\nfunction RDF2h(rendererGraphs, tbox) {\n    function r2h(suffix) {\n        return rdf.sym(\"http://rdf2h.github.io/2015/rdf2h#\"+suffix);\n    }\n    if (!Array.isArray(rendererGraphs)) {\n        rendererGraphs = [rendererGraphs];\n    }\n    if (tbox) {\n        this.tbox = tbox;\n    } else {\n        this.tbox = rendererGraphs[0];\n    }\n    this.rendererGraphs = rendererGraphs.reverse();\n    this.env = {}; //this is to allow shared vars among renderers\n}\n\n\n(function () {\n    var r2h = vocab.rdf2h;\n    var origLokup = Mustache.Context.prototype.lookup;\n    Mustache.Context.prototype.lookup = function (name) {\n        if (this.view instanceof RDF2h.Renderee) {\n            var rdf2h = this.view.rdf2h;\n            var graphNode = this.view.graphNode;\n            var graph = graphNode.graph;\n            var context = this.view.context;\n            function resolvePath(path) {\n                function resolveSubPath(node, pathSections) {\n                    function resolveSection(section) {\n                        if (section === \".\") {\n                            return node;\n                        } else {\n                            if (section.endsWith(\"<-\")) {\n                                return node.in(RDF2h.resolveCurie(section.substring(0, section.length - 2)));\n                            } else {\n                                if (section.startsWith(\"^\")) {\n                                    return node.in(RDF2h.resolveCurie(section.substring(1)));\n                                } else {\n                                    return node.out(RDF2h.resolveCurie(section));\n                                }\n                            }\n                        }\n                    }\n                    let subNode = resolveSection(pathSections[0]);\n                    if (pathSections.length === 1) {\n                        var resultNodes = subNode.nodes;\n                        if (resultNodes.length === 0) {\n                            //handling pseudo properties of literals\n                            if (node.nodes[0].language) {\n                                if (RDF2h.resolveCurie(pathSections[0]).equals(rdf.sym(\"http://purl.org/dc/terms/language\"))) {\n                                    return [rdf.literal(node.nodes[0].language)];\n                                }\n                            }\n                            if (node.nodes[0].datatype) {\n                                if (RDF2h.resolveCurie(pathSections[0]).equals(RDF2h.resolveCurie(\"rdf:type\"))) {\n                                    return [node.nodes[0].datatype];\n                                }\n                            }\n                        }\n                        return resultNodes;\n                    }\n                    return resolveSubPath(subNode,pathSections.slice(1))    \n                }\n                function splitPathSection(string) {\n                    let result = [];\n                    let readingURI = false;\n                    let lastCharLess = false;\n                    let section = \"\";\n                    function nextSection() {\n                        if (section.length > 0) {\n                            result.push(section);\n                            section = \"\";    \n                        }\n                    }\n                    for (var pos = 0; pos < string.length; pos++) {    \n                        let c = string[pos];\n                        if (lastCharLess) {\n                            if (c !== \"-\") {\n                                nextSection();\n                                readingURI = true;\n                            }\n                            section += \"<\";\n                            lastCharLess = false;\n                        }\n                        if (c === \"<\") {\n                            lastCharLess = true;\n                            continue;\n                        }\n                        if (readingURI && (c == \">\")) {\n                            section += c;\n                            nextSection();\n                            readingURI = false;\n                            continue;\n                        }\n                        if (!readingURI && (c == \"/\")) {\n                            nextSection();\n                            continue;\n                        }\n                        section += c;\n                    }\n                    nextSection();\n                    return result;\n                }\n                var pathSections = splitPathSection(path);// .split(\"/\").filter(function(e) { return e.length > 0})\n                return resolveSubPath(graphNode, pathSections);\n            }\n            if (name.startsWith(\"@prefix \")) {\n                var splits = name.split(\" \");\n                var prefixPart = splits[1];\n                var iriPart = splits[2];\n                var prefix = prefixPart.substring(0, prefixPart.length -1);\n                var iri = iriPart.substring(1, iriPart.length -1);\n                RDF2h.prefixMap[prefix] = iri;\n                return \"\";\n            }\n            if (name.startsWith(\":render \")) {\n                var splits = name.split(\" \");\n                var nodePath = splits[1];\n                var subContext = splits[2];\n                if (subContext) {\n                    subContext = RDF2h.resolveCurie(subContext);\n                }\n                if (!subContext) {\n                    subContext = context;\n                }\n                var resolvedNodes = resolvePath(nodePath);\n                if (resolvedNodes.length > 1) {\n                    console.warn(\"Argument of render evaluates to more than one node!\")\n                }\n                if (resolvedNodes.length > 0) {\n                    return rdf2h.render(graph, resolvedNodes[0], subContext)\n                } else {\n                    return \"\";\n                }\n            }\n            if (name.startsWith(\":continue\")) {\n                var splits = name.split(\" \");\n                var subContext = splits[1];\n                if (subContext) {\n                    subContext = RDF2h.resolveCurie(subContext);\n                }\n                if (!subContext) {\n                    subContext = context;\n                }\n                if (graphNode.nodes.length > 1) {\n                    console.warn(\":continue invoked in context with more than one node, this shouldn't be possible!\")\n                }\n                return rdf2h.render(graph, graphNode.nodes[0], subContext);\n\n            }\n            if (name.startsWith(\"+\")) {\n                name = name.substring(1);\n                return (resolvePath(name).length > 0);\n            }\n            var nodes = resolvePath(name);\n            if (nodes.length === 1) {\n                return new RDF2h.Renderee(rdf2h, GraphNode(nodes[0], graph), context);\n            } else {\n                return nodes.map(function (node) {\n                    return new RDF2h.Renderee(rdf2h, GraphNode(node, graph), context);\n                });\n            }\n            /*var node = this.view;\n             if (name === \".\") {\n             return node;\n             } else {\n             return \"not supported: \"+name;\n             }*/\n        } else {\n            return origLokup.call(this, name);\n        }\n    };\n})();\n\nRDF2h.Renderee = function (rdf2h, graphNode, context) {\n    if (!graphNode.nodes) {\n        throw new Error(\"second argument must be a GraphNode\");\n    }\n    if (graphNode.nodes.length !== 1) {\n        throw new Error(\"Renderee must be a single node\");\n    }\n    this.rdf2h = rdf2h;\n    this.graphNode = graphNode;\n    this.context = context;\n};\n\nRDF2h.Renderee.prototype.toString = function () {\n    if (this.graphNode.value) {\n        return this.graphNode.value;\n    }\n    return this.graphNode.toString();\n}\n\nRDF2h.prototype.getRenderer = function (renderee) {\n    var r2h = vocab.rdf2h;\n    let tbox = this.tbox;\n    function matchesContext(cfRenderer) {\n        var contexts = cfRenderer.out(r2h(\"context\")).nodes;\n        if (contexts.length === 0) {\n            console.debug(\"renderer \"+cfRenderer+\" specifies no context, thus accepting it for \"+renderee.context);\n            return true;\n        }\n        return contexts.some(function(context) {\n            if (renderee.context.equals(context)) {\n                console.debug(\"renderer \"+cfRenderer+\" matches the context \"+renderee.context);\n                return true;\n            }\n        });\n    }\n    function resolveRendererNode(rendererURI) {\n        if (!window) {\n            return \"Could not get renderer: \" + rendererURI + \", no window object.\"\n        }\n        var pageURIPrefix = window.location + \"#\";\n        if (!rendererURI.startsWith(pageURIPrefix)) {\n            return \"Could not get renderer: \" + rendererURI + \", the prefix must be \" + pageURIPrefix + \".\"\n        }\n        var id = rendererURI.substring(pageURIPrefix.length);\n        return document.getElementById(id).textContent;\n    }\n    function rendererRenderer(renderer) {\n        return function (renderee) {\n            return Mustache.render(renderer, renderee);\n        };\n    }\n    function getTypes(graphNode) {\n        //the array might contain rdfs:Resource twice (at the end)\n        if (graphNode.node.termType === \"Literal\") {\n            return [graphNode.node.datatype];\n        } else {\n            return graphNode.out(vocab.rdf(\"type\")).nodes.sort(\n                (a,b) => {\n                    if (a.equals(b)) {\n                        return 0;\n                    }\n                    if (a.equals(vocab.rdfs(\"Resource\"))) {\n                        return 1;\n                    }\n                    if (b.equals(vocab.rdfs(\"Resource\"))) {\n                        return -1;\n                    }\n                    if (tbox.match(a, vocab.rdfs(\"subClassOf\"),b).length === 0) {\n                        if (tbox.match(b, vocab.rdfs(\"subClassOf\"),a).length === 0) {\n                            return a.value.localeCompare(b.value);\n                        } else {\n                            return 1;\n                        }\n                    } else {\n                        return -1;\n                    }\n                }\n            ).concat([vocab.rdfs(\"Resource\")]);\n        }        \n    }\n    let self = this;\n    function getMatchingRenderer(types, context) {\n        function getMatching(renderers) {\n            return renderers.find(renderer => context.equals(renderer.out(vocab.rdf2h(\"context\")).node));\n        }\n        let reverseGraphs = self.rendererGraphs;\n        return types.reduce((renderer, type) => {\n            return renderer ? renderer : reverseGraphs.reduce((renderer, graph) => {\n                type =  GraphNode(type, graph);\n                return renderer ? renderer : getMatching(type.in(vocab.rdf2h(\"type\")).split());\n            }, null);\n        }, null);\n    }\n    let types = getTypes(renderee.graphNode);\n    let renderer = getMatchingRenderer(types, renderee.context);\n    if (!renderer) {\n        throw Error(\"No renderer found with context: <\"+renderee.context.value+\"> for any of the types \"+types.map(t => \"<\"+t.value+\">\").join()\n                    +\". The resource <\"+renderee.graphNode.value+\"> could thus not be rendered.\");\n    }\n    let mustache = renderer.out(vocab.rdf2h(\"mustache\"));\n    if (mustache.nodes.length > 0) {\n        return rendererRenderer(mustache.value);\n    }\n    let js = renderer.out(vocab.rdf2h(\"javaScript\"))\n    return function (renderee) {\n        try {\n            let render =  (n, context) => {\n                return renderee.rdf2h.render(n.graph, n.node, context ? context : renderee.context);\n            };\n            let output = \"\";\n            let print = (s) => {\n                output += s;\n            };\n            //Also printing return value for now\n            let returnValue = (new Function(\"n\", \"context\", \"$rdf\", \"render\", \"print\", \"GraphNode\", \"env\", js.value)\n                    )(renderee.graphNode, renderee.context, rdf, render, print, GraphNode, renderee.rdf2h.env);\n            if (returnValue) {\n                return output + returnValue;\n            } else {\n                return output;\n            }\n        } catch(err) {\n            err.message = err.message + \" in \" + js.value;\n            let stackLines = err.stack.split(\"\\n\");\n            let lineWithSelf = stackLines.findIndex(l => l.indexOf(\"RDF2h.render\") > 0);\n            err.stack = stackLines.splice(0, lineWithSelf - 1).join(\"\\n\");\n            throw err;\n        }\n    };\n\n\n}\n\nRDF2h.prototype.render = function (graph, node, context) {\n    if (!node.termType) {\n        node = rdf.sym(node);\n    }\n    if (!context) {\n        context = vocab.rdf2h(\"Default\");\n    }\n    //wrap all in one object that gets special care by lookup\n    var renderee = new RDF2h.Renderee(this, GraphNode(node, graph), context);\n    var renderer = this.getRenderer(renderee);\n    return renderer(renderee);\n}\n\nRDF2h.prefixMap = {};\nRDF2h.prefixMap[\"rdf\"] = \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\";\nRDF2h.prefixMap[\"rdfs\"] = \"http://www.w3.org/2000/01/rdf-schema#\";\nRDF2h.prefixMap[\"r2h\"] = \"http://rdf2h.github.io/2015/rdf2h#\";\nRDF2h.prefixMap[\"schema\"] = \"http://schema.org/\";\nRDF2h.prefixMap[\"rdf\"] = \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\";\nRDF2h.prefixMap[\"dct\"] = \"http://purl.org/dc/terms/\";\n\n\nRDF2h.resolveCurie = function (curie) {\n    if (curie.startsWith(\"<\") && curie.endsWith(\">\")) {\n        //URI, not a curie\n        return rdf.sym(curie.substring(1, curie.length - 1));\n    }\n    var splits = curie.split(\":\");\n    var prefix = splits[0];\n    var suffix = splits[1];\n    if (RDF2h.prefixMap[prefix]) {\n        return rdf.sym(RDF2h.prefixMap[prefix] + suffix);\n    } else {\n        return rdf.sym(curie);\n    }\n\n};\n\nif (typeof window !== 'undefined') {\n    window.RDF2h = RDF2h;\n}\n\nif (typeof module !== 'undefined') {\n    module.exports = RDF2h;\n}\n"],"sourceRoot":""}